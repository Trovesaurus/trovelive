VertexShader "common/KDefines.common";
FragmentShader "common/KDefines.common";
VertexShader "common/KShaderGlobals.common";
FragmentShader "common/KShaderGlobals.common";
FragmentShader "common/KTextures.common";

VertexShader "vertex/Library_Fog.vertex";

technique Terrain_Liquid {
  Phase = Transparent_1;

  pass mainPass {
	CullModeDirection=None;
    AlphaBlendEnable = 1;

    VertexShader "vertex/Terrain_Liquid.vertex";
    
    FragmentShader "fragment/Library_NormalMap.fragment";
    FragmentShader "fragment/Library_DiffuseLighting.fragment";
    FragmentShader "fragment/Library_SpecularLighting.fragment";
    
    FragmentShader "fragment/Terrain_Liquid.fragment";
    
    VertexMain = TerrainLiquidVS;
    FragmentMain = TerrainLiquidPS;
  }
}

technique Terrain_Liquid_Simple {
  Phase = Transparent_1;

  pass mainPass {
	CullModeDirection=None;
    AlphaBlendEnable = 1;

    VertexShader "vertex/Terrain_Liquid.vertex";
    
    FragmentShader "fragment/Library_NormalMap.fragment";
    FragmentShader "fragment/Library_DiffuseLighting.fragment";
    FragmentShader "fragment/Library_SpecularLighting.fragment";
    
    FragmentShader "fragment/Terrain_Liquid.fragment";
    
    VertexMain = TerrainLiquidVS;
    FragmentMain = TerrainLiquidSimplePS;
  }
}


technique Terrain_DistanceFadeLiquid {
  Phase = Transparent_2;

  pass mainPass {
	CullModeDirection=None;
    AlphaBlendEnable = 1;

    VertexShader "vertex/Terrain_Liquid.vertex";
    
    FragmentShader "fragment/Library_NormalMap.fragment";
    FragmentShader "fragment/Library_DiffuseLighting.fragment";
    FragmentShader "fragment/Library_SpecularLighting.fragment";
    
    FragmentShader "fragment/Terrain_Liquid.fragment";
    
    VertexMain = TerrainLiquidVS;
    FragmentMain = TerrainDistanceFadeLiquidPS;
  }
}


technique Terrain_DistanceFadeLiquid_Simple {
  Phase = Transparent_2;

  pass mainPass {
	CullModeDirection=None;
    AlphaBlendEnable = 1;

    VertexShader "vertex/Terrain_Liquid.vertex";
    
    FragmentShader "fragment/Library_NormalMap.fragment";
    FragmentShader "fragment/Library_DiffuseLighting.fragment";
    FragmentShader "fragment/Library_SpecularLighting.fragment";
    
    FragmentShader "fragment/Terrain_Liquid.fragment";
    
    VertexMain = TerrainLiquidVS;
    FragmentMain = TerrainDistanceFadeLiquidSimplePS;
  }
}
