
KPSMain(ObjectFlashPS)
{ 
  KFloat4 terrainColor = CalcTerrainColorUnlit(KInputVar);
  
  KFloat4 diff = KFloat4(1.0, 1.0, 1.0, 1.0) - terrainColor;
  diff.x *= 0.85;
  diff.y *= 0.25;
  diff.z *= 0.25;
  
  KFloat4 red = KFloat4(1.0, 0.30, 0.30, 1.0);
  red.w = 0.0;
  
  terrainColor = KLerp(diff+terrainColor, red, 0.25);
  
  KPSOutput(terrainColor);
}

KFloat FxaaLuma(KFloat3 rgb) {
  return sqrt(dot(rgb, KFloat3(0.299, 0.587, 0.114)));
}

KPSMain(ObjectFrozenPS)
{ 
  KFloat4 terrainColor = CalcTerrainColor(KInputVar);
  
  KFloat luma = FxaaLuma(terrainColor.xyz)*0.5 + 0.5;
  
  KFloat4 blue = KFloat4(
                         KLerp(terrainColor.xyz, KFloat3(0.85, 0.85, 1.00)*luma, luma),
                         terrainColor.w*0.9);
  
  
  KPSOutput(blue);
}

KFloat CalcDissolve(KFloat blend, KFloat localLength)
{
  return smoothstep(0.0, clamp(localLength*.1, 0.0, 1.0),blend);
}

KFloat GridMask(KFloat2 coords, KFloat amount)
{
  KFloat2 gridValue = KFrac(coords*4.0);
  gridValue = step(KFloat2(amount, amount), abs(gridValue-KFloat2(0.5, 0.5)));
  KFloat gridBlend = gridValue.x*gridValue.y;
  return gridBlend;
}

KPSMain(ObjectTeleportPS)
{
  KFloat4 terrainColor = CalcTerrainColor(KInputVar);
  
  KFloat localLength = length(KInput(localPos));
  KFloat dissolve = CalcDissolve(blendAmount, localLength);
  
  KFloat4 dissolvedColor;
  dissolvedColor.xyz = KLerp(terrainColor.xyz, KFloat3(0, 0.8, 1.50),   pow(dissolve, 2.0));
  dissolvedColor.a = terrainColor.a * GridMask(KInput(texCoord0), dissolve*.4) * pow(1.0-dissolve, .5);
  
  KPSOutput(dissolvedColor);
}

KFloat3 StealthRGB2HSV(KFloat3 c)
{
    KFloat4 K = KFloat4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    KFloat4 p = KLerp(KFloat4(c.zy, K.wz), KFloat4(c.yz, K.xy), step(c.z, c.y));
    KFloat4 q = KLerp(KFloat4(p.xyw, c.x), KFloat4(c.x, p.yzx), step(p.x, c.x));

    KFloat d = q.x - min(q.w, q.y);
    KFloat e = 1.0e-10;
    return KFloat3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
 
KFloat4 StealthFade(KFloat4 inColor)
{
  KFloat4 stealthColor;
  
  KFloat avg = (inColor.r + inColor.g + inColor.b)*0.33333333333;
  
  KFloat3 hsv = StealthRGB2HSV(inColor.xyz);
  
  stealthColor.xyz = KLerp(inColor.xyz, KFloat3(avg,avg,avg), (1.0-hsv.y)*0.5);
  stealthColor.w = min(inColor.w, hsv.y*0.4 + 0.2);
  
  return stealthColor;
}

KPSMain(ObjectStealthPS)
{ 
  KFloat4 terrainColor = CalcTerrainColor(KInputVar);
  
  terrainColor = StealthFade(terrainColor);
    
  KPSOutput(terrainColor);
}

KPSMain(ObjectDistanceFadePS)
{ 
  KFloat4 terrainColor = CalcTerrainColor(KInputVar);
  
  terrainColor.w *= distanceFade;
    
  KPSOutput(terrainColor);
}

KPSMain(TerrainDistanceFadePS)
{ 
  KFloat4 terrainColor = CalcTerrainColor(KInputVar);
  terrainColor.w *= distanceFade;
    
  KPSOutput(terrainColor);
}

KPSMain(TerrainDistanceFadeSimplePS)
{ 
  KFloat4 terrainColor = CalcSimpleTerrainColor(KInputVar);
  
  terrainColor.w *= distanceFade;
    
  KPSOutput(terrainColor);
}

KPSMain(ObjectAlphaBlendPS)
{
	KFloat4 terrainColor = CalcTerrainColor(KInputVar);
  terrainColor.w = blendAmount * terrainColor.w;
  KPSOutput(terrainColor);
}