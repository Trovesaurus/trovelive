
KCBBegin(INSTANCE_DATA)
  KUniform(KMat4, _instanceMatrices[MAX_INSTANCES])
  KUniform(KFloat4, _illumination[MAX_INSTANCES])
KCBEnd

KCBBegin(PULSE_INSTANCE_DATA)
  KUniform(KFloat3, _pulseColor[MAX_INSTANCES])
KCBEnd

KVDataBegin
  KVDataInOut( KFloat3, in_Position, POSITION)
  KVDataInOut( KFloat2, in_TexCoord0, UV)
  KVDataInOut( KFloat2, in_Extra, EXTRA)
  KVDataInOut( KFloat4, in_Color0, COLOR0)
  KVDataInOut( KFloat4, in_Color1, COLOR1)
  KVDataInOut( KFloat3, in_Normal, NORMAL)
  KVDataInOut( KFloat3, in_Tangent, TANGENT)
  KInstanceData
KVDataEnd

KPDataBegin
  KPDataPosition( KFloat4, Pos, SV_POSITION)
  KPDataInOut( KFloat2, texCoord0, TEXCOORD0)
  KPDataInOut( KFloat2, texCoord1, TEXCOORD1)
  
  KPDataInOut( KFloat4, tintColor, COLOR0)
  KPDataInOut( KFloat4, blockColor, COLOR1)
  KPDataInOut( KFloat2, fogBrdf, COLOR2)
  
  KPDataInOut( KFloat3, normal, TEXCOORD2)
  KPDataInOut( KFloat3, tangent, TEXCOORD3)
  KPDataInOut( KFloat3, worldPos, TEXCOORD4)
  KPDataInOut( KFloat3, localPos, TEXCOORD5)
KPDataEnd

KFloat4 _TransformTerrain(KFloat3 position)
{
  return KMUL(gModelViewProjectionMatrix, KFloat4(position, 1.0));
}

KModifierFunction BasicObject(KVSData KInputVar)
{
  KDeclareOutput;
  
  KMat4 modelViewMatrix = KMUL(gViewMatrix, _instanceMatrices[KInstanceID]);
  KMat3 normalMatrix = KUpper3x3(modelViewMatrix);

  KFloat4 transformedPoint = KMUL(_instanceMatrices[KInstanceID], KFloat4(KInput(in_Position), 1.0));
  KSetPosition(Pos, KMUL(gViewProjectionMatrix, transformedPoint));
  
  
  KOutput(texCoord0) = KInput(in_TexCoord0);
  KOutput(texCoord1) = KInput(in_Extra);
  
  KOutput(normal) = normalize(KMUL(normalMatrix, KInput(in_Normal)).xyz);
  KOutput(tangent) = normalize(KMUL(normalMatrix, KInput(in_Tangent)).xyz);
  
  KOutput(worldPos) = KMUL(modelViewMatrix, KFloat4(KInput(in_Position), 1.0)).xyz;
  KOutput(fogBrdf).x = Lighting_DepthFogVertex(length(KOutput(worldPos)));
  KOutput(fogBrdf).y = KInput(in_Extra).x;
  
  KOutput(localPos) = KInput(in_Position);
  
  KVSOutput;
} 

KVSMain(ObjectInstancedVS)
{
  KDeclareOutput;
  KModifyData(BasicObject);
  
  KOutput(tintColor) = KInput(in_Color0);
  KOutput(blockColor) = KInput(in_Color1);
  
  KVSOutput;
}

KVSMain(ObjectAreaColorInstancedVS)
{
  KDeclareOutput;
  KModifyData(BasicObject);
  
  KOutput(blockColor) = _illumination[KInstanceID];
  KOutput(blockColor).w *= KInput(in_Color1).w;
  
  KOutput(tintColor) = KInput(in_Color0);
  
  KVSOutput;
}

KVSMain(ObjectPulseInstancedVS)
{
  KDeclareOutput;
  KModifyData(BasicObject);
  
  KOutput(blockColor) = _illumination[KInstanceID];
  KOutput(blockColor).w *= KInput(in_Color1).w;
  
  const KFloat sinPeriod = 1.5;
  const KFloat sinAmplitude = 0.1;
  const KFloat sinOffset = 0.35;
  
  KFloat sinWave = sin(gameTime*sinPeriod) * sinAmplitude + sinOffset;
  KFloat4 diff =  KFloat4(_pulseColor[KInstanceID],  KInput(in_Color0).w);
  
  KOutput(tintColor) = KLerp( KInput(in_Color0), diff, sinWave);
  
  KVSOutput;
}
