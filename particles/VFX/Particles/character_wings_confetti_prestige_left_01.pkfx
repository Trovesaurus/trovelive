Version = 1.13.4.53415;
Generator = EDITOR;
CParticleEffect	$LOCAL$/Resource
{
	OnSpawn = "$LOCAL$/Spawner";
	CustomAttributes = "$LOCAL$/_GlobalAttributes";
}
CNEdEditorParticle_Data	$LOCAL$/EDITOR
{
	Position = float3(8.7851971e-001, 7.2307175e-001, 4.8167887e-001);
	EulerOrientation = float3(-2.6949999e+001, 5.9135967e+001, 0.0000000e+000);
	CaptureFrameEnd = 50;
	PostFx_EnableGlow = false;
	Backdrops = "$LOCAL$/_BackdropList";
	ShowTimeline = true;
	ShowGrid = true;
}
CActionFactoryWithChilds	$LOCAL$/Spawner
{
	ChildList = 
	{
		"$LOCAL$/Light_Top",
		"$LOCAL$/RaysBack",
		"$LOCAL$/RayBack02",
		"$LOCAL$/EnergyBalls",
		"$LOCAL$/Chain",
		"$LOCAL$/Layer_2",
		"$LOCAL$/Layer_3",
	};
}
CParticleAttributeList	$LOCAL$/_GlobalAttributes
{
	AttributeList = 
	{
		"$LOCAL$/CParticleAttributeDeclaration_2124B15A",
		"$LOCAL$/CParticleAttributeDeclaration_B446C1F9",
		"$LOCAL$/CParticleAttributeDeclaration_9A4350E7",
		"$LOCAL$/CParticleAttributeDeclaration_D6CD3E36",
	};
	SamplerList = 
	{
		"$LOCAL$/CParticleSamplerCurve_6128E19F",
	};
}
CNEdEditorBackdrop_Model3D	$LOCAL$/_Backdrop_Model3D
{
	EditorInfosPosition = int2(-252, -371);
	LayerName = "Layer_Model";
	ResourceModel = "meshes/cuberoom_default.fbx";
}
CNEdEditorLightFactory	$LOCAL$/_Backdrop_Light_Factory
{
	NearClipPlane = 1.0000000e+002;
	LightSize = 9.9999998e-003;
	SpotFalloff = 8.8541701e-002;
	Magnitude = 1.0000000e+005;
}
CNEdEditorBackdrop_Light	$LOCAL$/_Backdrop_Light
{
	LayerName = "GlobalLight";
	Position = float3(1.1488137e+002, 2.8527716e+002, 2.1835413e+002);
	EulerOrientation = float3(-4.9248184e+001, 2.7519573e+001, -2.2448494e-001);
	LightFactory = "$LOCAL$/_Backdrop_Light_Factory";
	LightDistance = 3.7717276e+002;
}
CNEdEditorBackdrop_List	$LOCAL$/_BackdropList
{
	EditorInfosPosition = int2(-100, -365);
	BackgroundLayers2D = 
	{
		"$LOCAL$/_Backdrop_Brush",
	};
	SceneLayers3D = 
	{
		"$LOCAL$/_Backdrop_Model3D",
		"$LOCAL$/_Backdrop_Light",
	};
	Backdrops3DToSpawn = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Effect_56CBBE7B",
	};
	IsBackdrops3DToSpawnExpanded = true;
}
CNEdEditorBackdrop_Brush	$LOCAL$/_Backdrop_Brush
{
	EditorInfosPosition = int2(-253, -417);
	LayerName = "Layer_Brush";
}
CNEdEditorBackdrop_Effect	$LOCAL$/CNEdEditorBackdrop_Effect_56CBBE7B
{
	LayerName = "Effect_1";
	ResourceEffect = "Particles/character_wings_water_left_01.pkfx";
	IsActive = false;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_2124B15A
{
	AttributeName = "KillAllOnDespawn";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_E7D47FFE
{
	Renderer = "$LOCAL$/CParticleRenderer_List_E23AFF99";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_CD441A92",
		"$LOCAL$/CParticleFieldDeclaration_A33BCCA0",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerDoubleCurve_6C81BEE6",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_738834A1";
	States = 
	{
		"$LOCAL$/CParticleState_E5AFAF78",
	};
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_E23AFF99
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Billboard_881A14D3",
		"$LOCAL$/CParticleRenderer_Billboard_673D414E",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_881A14D3
{
	DrawOrder = 1;
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend;
	Diffuse = "Textures/vfx_ray_03b.dds";
	SoftnessDistance = 5.0000001e-002;
	BillboardMode = VelocitySpheroidalAlign;
	AxisScale = 4.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_CD441A92
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleSamplerDoubleCurve	$LOCAL$/CParticleSamplerDoubleCurve_6C81BEE6
{
	SamplerName = "Fire_Size";
	Times = 
	{
		0.0000000e+000,
		6.4527828e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		6.5138638e-002,
		9.6005785e-001,
		9.7173971e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		-2.0720493e-002,
		1.0544177e-002,
		5.7963347e-003,
		0.0000000e+000,
		0.0000000e+000,
	};
	Times1 = 
	{
		0.0000000e+000,
		6.4012039e-001,
		1.0000000e+000,
	};
	FloatValues1 = 
	{
		7.5234413e-002,
		9.7179723e-001,
		9.8181564e-001,
	};
	FloatTangents1 = 
	{
		0.0000000e+000,
		2.7361494e-002,
		8.2978748e-002,
		4.6651151e-002,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_738834A1
{
	Expression = "function void	Eval()

{
	Life = 1;
	float x = rand(1.25,1.5)*WingFlip;
	float y = 0.80;;
	float z = rand(0.8,1.25);
	Velocity = float3(x,y,z);
	//AxisStretch = Velocity;
	ScalarRotationSpeed = rand(-1,1);
	Position = float3(0.0,0.1,-0.03);
}";
}
CParticleState	$LOCAL$/CParticleState_E5AFAF78
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_E3C7C79B",
		"$LOCAL$/CParticleEvolver_Rotation_E6D53FEC",
		"$LOCAL$/CParticleEvolver_Script_17FFA71F",
		"$LOCAL$/CParticleEvolver_Localspace_B32DECA9",
		"$LOCAL$/Script_1",
		"$LOCAL$/Script_3",
		"$LOCAL$/Field_4",
	};
}
CParticleEvolver_Rotation	$LOCAL$/CParticleEvolver_Rotation_E6D53FEC
{
	CustomName = "Rotation";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_17FFA71F
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_6F50B4CE";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_6F50B4CE
{
	Expression = "function void	Eval()

{
	

	Size = 	Fire_Size.sample(LifeRatio,1);

}";
}
CParticleEvolver_Localspace	$LOCAL$/CParticleEvolver_Localspace_B32DECA9
{
	CustomName = "Localspace";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Light_Top
{
	EditorInfosIsBlockMinimized = 0;
	Descriptor = "$LOCAL$/CParticleDescriptor_E7D47FFE";
	Infinite = true;
	DurationInSeconds = 3.4999999e-001;
	SpawnCount = 2.0000000e+001;
	ContinuousSpawner = false;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_B446C1F9
{
	AttributeName = "WingFlip";
	AttributeType = int;
	DefaultValueF4 = float4(1.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	DefaultValueI4 = int4(1, 0, 0, 0);
	HasMin = true;
	HasMax = true;
	MinValueF4 = float4(-1.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	MinValueI4 = int4(-1, 0, 0, 0);
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_6128E19F
{
	SamplerName = "Curve_1";
	ValueType = Float3;
	Interpolator = Linear;
	Times = 
	{
		0.0000000e+000,
		2.7766120e-001,
		3.0205205e-001,
		3.4843531e-001,
		5.8928537e-001,
		6.5161443e-001,
		6.6596043e-001,
		7.4857950e-001,
		7.9553187e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		8.2352942e-001,
		4.9411768e-001,
		2.3529410e-002,
		9.8431373e-001,
		6.7843145e-001,
		3.1372551e-002,
		1.0000000e+000,
		7.9607844e-001,
		2.7058828e-001,
		5.4509819e-001,
		1.7254902e-001,
		7.2156864e-001,
		5.5501205e-001,
		1.7437525e-001,
		7.2313398e-001,
		6.9411778e-001,
		2.0000000e-001,
		7.4509805e-001,
		9.2016929e-001,
		2.2605163e-001,
		6.5350252e-001,
		9.5294118e-001,
		2.5490198e-001,
		5.0196064e-001,
		1.6862744e-001,
		8.1176472e-001,
		7.3725498e-001,
		3.1372553e-001,
		9.1764706e-001,
		7.9215682e-001,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Script	$LOCAL$/Script_1
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_673D414E";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_673D414E
{
	Expression = "function void	Eval()
{
	float Offset = -0.2;
	float Scale = 1;
	float3 RGB = Curve_1.sample((1-LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,1* (1-LifeRatio));
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,Alpha);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_A33BCCA0
{
	FieldName = "Alpha";
}
CParticleEvolver_Script	$LOCAL$/Script_3
{
	Active = false;
	CustomName = "Debug";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_D724F094";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_D724F094
{
	Expression = "function void	Eval()
{
	float4 OutColor;
	float3 ValueC = rgb2hsv(Color.rgb);
	ValueC = float3(ValueC.r,0,ValueC.b);
	ValueC = hsv2rgb(ValueC);
	float3 DebugCol = rgb2hsv(Color.rgb);
	DebugCol = float3(DebugCol.r,DebugCol.g,1);
	DebugCol = hsv2rgb(DebugCol);
	OutColor = select(float4(ValueC,Color.a), float4(DebugCol,Color.a),DebugValueColor);
	Color = select(Color,OutColor,DebugValueColorActivation);
	// rgb2hsv(c)
	// hsv2rgb(c)
}
";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_9A4350E7
{
	AttributeName = "DebugValueColor";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_D6CD3E36
{
	AttributeName = "DebugValueColorActivation";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_AE4ED498
{
	Renderer = "$LOCAL$/CParticleRenderer_List_DE35433B";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_3BE17EEE",
		"$LOCAL$/CParticleFieldDeclaration_82EB7149",
		"$LOCAL$/CParticleFieldDeclaration_BF87D540",
		"$LOCAL$/CParticleFieldDeclaration_43F47D03",
		"$LOCAL$/CParticleFieldDeclaration_C0872A7D",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_DF5E2E6D";
	States = 
	{
		"$LOCAL$/CParticleState_E2390734",
	};
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_DE35433B
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Mesh_0D36F193",
		"$LOCAL$/CParticleRenderer_Mesh_A7AA4A2E",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_3BE17EEE
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_82EB7149
{
	FieldName = "Alpha";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_BF87D540
{
	FieldName = "Axis";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_43F47D03
{
	FieldName = "AxisUp";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_DF5E2E6D
{
	Expression = "function void	Eval()

{
	Life = rand(0.8,1);
	//Velocity = float3(1.5*WingFlip,1.0,1.25);
	//AxisStretch = Velocity;
	Rotation = rand(-pi,pi);
	Position = float3(1.6,1,1.15);
	Axis = float3(1* WingFlip,0,0);
	AxisUp = cross(float3(1,0,0), Axis);
	ScalarRotationSpeed = 2;
}";
}
CParticleState	$LOCAL$/CParticleState_E2390734
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_22C50851",
		"$LOCAL$/CParticleEvolver_Localspace_A92D01CB",
		"$LOCAL$/CParticleEvolver_Script_31C28EEA",
		"$LOCAL$/Trail_1",
		"$LOCAL$/CParticleEvolver_Script_AF99325C",
		"$LOCAL$/CParticleEvolver_Field_3ADC27BE",
		"$LOCAL$/Evolver_1",
	};
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_22C50851
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_346E34E8";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_346E34E8
{
	Expression = "function void	Eval()

{
	

	Size = 	clamp(LifeRatio * 16,1,16);//Fire_Size.sample(LifeRatio,1);
	

}";
}
CParticleEvolver_Localspace	$LOCAL$/CParticleEvolver_Localspace_A92D01CB
{
	CustomName = "Localspace";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_31C28EEA
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_9EA582F5";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_9EA582F5
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 1;
	float3 RGB = Curve_1.sample((1-LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,1,2 * Alpha);
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,Alpha);//ColorCoeff;
	Color = ColorOut *1.5;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_AF99325C
{
	Active = false;
	CustomName = "Debug";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_BCF0524F";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_BCF0524F
{
	Expression = "function void	Eval()
{
	float4 OutColor;
	float3 ValueC = rgb2hsv(Color.rgb);
	ValueC = float3(ValueC.r,0,ValueC.b);
	ValueC = hsv2rgb(ValueC);
	float3 DebugCol = rgb2hsv(Color.rgb);
	DebugCol = float3(DebugCol.r,DebugCol.g,1);
	DebugCol = hsv2rgb(DebugCol);
	OutColor = select(float4(ValueC,Color.a), float4(DebugCol,Color.a),DebugValueColor);
	Color = select(Color,OutColor,DebugValueColorActivation);
	// rgb2hsv(c)
	// hsv2rgb(c)
}
";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_3ADC27BE
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_2D43E259";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_2D43E259
{
	Times = 
	{
		0.0000000e+000,
		1.6578382e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		9.0560651e-001,
		-1.4828905e-002,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		1.8352838e-002,
		9.2350595e-002,
		-4.2973801e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CActionFactoryParticleSpawnerBase	$LOCAL$/EnergyBalls
{
	Descriptor = "$LOCAL$/CParticleDescriptor_AE4ED498";
	Infinite = true;
	DurationInSeconds = 1.0000000e+000;
	SpawnCount = 4.0000000e+000;
	ContinuousSpawner = false;
}
CParticleRenderer_Mesh	$LOCAL$/CParticleRenderer_Mesh_0D36F193
{
	CustomName = "Mesh";
	Meshes = 
	{
		"$LOCAL$/CParticleRenderer_Mesh_Descriptor_2DBFD652",
	};
	ScaleField = "Size";
	RotationAxisField = "Axis";
	ForwardAxisField = "AxisUp";
	UpAxisField = "Axis";
}
CParticleRenderer_Mesh_Descriptor	$LOCAL$/CParticleRenderer_Mesh_Descriptor_2DBFD652
{
	Mesh = "Meshes/Sphere.pkmm";
	Material = Additive;
	MaterialParametersFields = 
	{
		"DiffuseColor = Color",
	};
	Diffuse = "Textures/vfx_sphereRipple_01.dds";
	CustomName = "Mesh_Descriptor";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_C0872A7D
{
	FieldName = "Size";
	FieldType = float3;
}
CParticleEvolver_Rotation	$LOCAL$/Evolver_1
{
	CustomName = "Rotation";
}
CParticleEvolver_Field	$LOCAL$/Field_4
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_CD02457B";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_CD02457B
{
	Times = 
	{
		0.0000000e+000,
		6.2934719e-002,
		1.8928063e-001,
		3.0647936e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		2.2737655e-001,
		4.0988779e-001,
		5.5787146e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		3.8001265e-002,
		7.6290235e-002,
		-9.5005305e-003,
		-8.8127125e-003,
		5.9987313e-001,
		-2.0841439e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleRenderer_Mesh_Descriptor	$LOCAL$/CParticleRenderer_Mesh_Descriptor_474B0EFF
{
	Mesh = "Meshes/Sphere.pkmm";
	Material = Additive;
	MaterialParametersFields = 
	{
		"DiffuseColor = Color",
	};
	Diffuse = "Textures/vfx_grid_01.dds";
	CustomName = "Mesh_Descriptor";
}
CParticleRenderer_Mesh	$LOCAL$/CParticleRenderer_Mesh_A7AA4A2E
{
	CustomName = "Mesh";
	Meshes = 
	{
		"$LOCAL$/CParticleRenderer_Mesh_Descriptor_474B0EFF",
	};
	ScaleField = "Size";
	RotationAxisField = "Axis";
	ForwardAxisField = "AxisUp";
	UpAxisField = "Axis";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_0699B680
{
	Renderer = "$LOCAL$/CParticleRenderer_List_1DCF5743";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_4170E6AD",
		"$LOCAL$/CParticleFieldDeclaration_6B2A0474",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerDoubleCurve_0FC20247",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_A7CF1B16";
	States = 
	{
		"$LOCAL$/CParticleState_2E65AC91",
	};
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_1DCF5743
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Billboard_EE5855C2",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_EE5855C2
{
	DrawOrder = 2;
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_raySoft_01.dds";
	SoftnessDistance = 5.0000001e-002;
	BillboardMode = VelocitySpheroidalAlign;
	AxisScale = 8.9999998e-001;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_4170E6AD
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_6B2A0474
{
	FieldName = "Alpha";
}
CParticleSamplerDoubleCurve	$LOCAL$/CParticleSamplerDoubleCurve_0FC20247
{
	SamplerName = "Fire_Size";
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		6.5138638e-002,
		4.9162480e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		1.1770313e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	Times1 = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues1 = 
	{
		7.5234413e-002,
		5.4243183e-001,
	};
	FloatTangents1 = 
	{
		0.0000000e+000,
		5.8997893e-001,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_A7CF1B16
{
	Expression = "function void	Eval()

{
	Life = rand(0.2,0.3);
	float x = 1*WingFlip;
	float y = 1.0;
	float z = (sin(spawner.Age*4)-1.5)*0.5;
	Velocity = float3(x,y,z)*3;
	//AxisStretch = Velocity;
	ScalarRotationSpeed = rand(-1,1);
	Position = float3(0.0,0.1,-0.03);
}";
}
CParticleState	$LOCAL$/CParticleState_2E65AC91
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_B9CD8E28",
		"$LOCAL$/CParticleEvolver_Rotation_6826B40B",
		"$LOCAL$/CParticleEvolver_Script_07C90E2A",
		"$LOCAL$/CParticleEvolver_Localspace_F8B2279C",
		"$LOCAL$/CParticleEvolver_Script_3315D08F",
		"$LOCAL$/CParticleEvolver_Script_CBF71E99",
		"$LOCAL$/CParticleEvolver_Field_C5C07BD3",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_B9CD8E28
{
	CustomName = "Physics";
	Drag = 3.0000000e+000;
}
CParticleEvolver_Rotation	$LOCAL$/CParticleEvolver_Rotation_6826B40B
{
	CustomName = "Rotation";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_07C90E2A
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_08225335";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_08225335
{
	Expression = "function void	Eval()

{
	

	Size = 	Fire_Size.sample(LifeRatio,1);

}";
}
CParticleEvolver_Localspace	$LOCAL$/CParticleEvolver_Localspace_F8B2279C
{
	CustomName = "Localspace";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_3315D08F
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_9A5462FE";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_9A5462FE
{
	Expression = "function void	Eval()
{
	float Offset = 0.1;
	float Scale = 0.75;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,0.25* (Alpha));
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,Alpha);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_CBF71E99
{
	Active = false;
	CustomName = "Debug";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_BF8B64D0";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_BF8B64D0
{
	Expression = "function void	Eval()
{
	float4 OutColor;
	float3 ValueC = rgb2hsv(Color.rgb);
	ValueC = float3(ValueC.r,0,ValueC.b);
	ValueC = hsv2rgb(ValueC);
	float3 DebugCol = rgb2hsv(Color.rgb);
	DebugCol = float3(DebugCol.r,DebugCol.g,1);
	DebugCol = hsv2rgb(DebugCol);
	OutColor = select(float4(ValueC,Color.a), float4(DebugCol,Color.a),DebugValueColor);
	Color = select(Color,OutColor,DebugValueColorActivation);
	// rgb2hsv(c)
	// hsv2rgb(c)
}
";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_C5C07BD3
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_AA270D92";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_AA270D92
{
	Times = 
	{
		0.0000000e+000,
		1.4189357e-001,
		3.2678804e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		9.6413368e-001,
		5.7634634e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		-1.0669631e-002,
		-1.3903067e-002,
		-1.3491690e-001,
		-4.9124056e-001,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CActionFactoryParticleSpawnerBase	$LOCAL$/RaysBack
{
	EditorInfosIsBlockMinimized = 0;
	Descriptor = "$LOCAL$/CParticleDescriptor_0699B680";
	Infinite = true;
	DurationInSeconds = 3.4999999e-001;
	SpawnCount = 8.0000000e+001;
	ContinuousSpawner = false;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_EA3A0A3C
{
	Renderer = "$LOCAL$/CParticleRenderer_List_3F9417AF";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_C26604B9",
		"$LOCAL$/CParticleFieldDeclaration_5D333570",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerDoubleCurve_F5C648F3",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_5F2C5132";
	States = 
	{
		"$LOCAL$/CParticleState_1D3DCEDD",
	};
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_3F9417AF
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Billboard_E29EA89E",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_E29EA89E
{
	DrawOrder = 2;
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_raySoft_01.dds";
	SoftnessDistance = 5.0000001e-002;
	BillboardMode = VelocitySpheroidalAlign;
	AxisScale = 8.9999998e-001;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_C26604B9
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5D333570
{
	FieldName = "Alpha";
}
CParticleSamplerDoubleCurve	$LOCAL$/CParticleSamplerDoubleCurve_F5C648F3
{
	SamplerName = "Fire_Size";
	Times = 
	{
		0.0000000e+000,
		6.3043445e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		6.5138638e-002,
		2.7988288e-001,
		2.8251347e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		-2.0243838e-002,
		1.0301623e-002,
		6.0388907e-003,
		0.0000000e+000,
		0.0000000e+000,
	};
	Times1 = 
	{
		0.0000000e+000,
		6.6274077e-001,
		1.0000000e+000,
	};
	FloatValues1 = 
	{
		7.5234413e-002,
		3.2330200e-001,
		3.3332047e-001,
	};
	FloatTangents1 = 
	{
		0.0000000e+000,
		2.8328378e-002,
		8.5911013e-002,
		4.3718878e-002,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_5F2C5132
{
	Expression = "function void	Eval()

{
	Life = rand(0.2,0.3);
	float x = 0.25*(sin(-spawner.Age*4)+2)*WingFlip*0.5;
	float y = 0.25*(sin(-spawner.Age*4)+0.25);
	float z = 0.25*(sin(-spawner.Age*4)-2);
	
	Velocity = float3(x,y,z)*4;
	ScalarRotationSpeed = rand(-1,1);
	Position = float3(0.0,0.1,-0.03);
}";
}
CParticleState	$LOCAL$/CParticleState_1D3DCEDD
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_2577F864",
		"$LOCAL$/CParticleEvolver_Rotation_739C0CF7",
		"$LOCAL$/CParticleEvolver_Script_1747A386",
		"$LOCAL$/CParticleEvolver_Localspace_9D616718",
		"$LOCAL$/CParticleEvolver_Script_8B1A07BB",
		"$LOCAL$/CParticleEvolver_Script_DA6A0D65",
		"$LOCAL$/CParticleEvolver_Field_FD099D3F",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_2577F864
{
	CustomName = "Physics";
	Drag = 3.0000000e+000;
}
CParticleEvolver_Rotation	$LOCAL$/CParticleEvolver_Rotation_739C0CF7
{
	CustomName = "Rotation";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_1747A386
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_0D3BA5C1";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_0D3BA5C1
{
	Expression = "function void	Eval()

{
	

	Size = 	Fire_Size.sample(LifeRatio,1);

}";
}
CParticleEvolver_Localspace	$LOCAL$/CParticleEvolver_Localspace_9D616718
{
	CustomName = "Localspace";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_8B1A07BB
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_E140139A";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E140139A
{
	Expression = "function void	Eval()
{
	float Offset = 0.0;
	float Scale = 0.5;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,0.75* Alpha);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,Alpha);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_DA6A0D65
{
	Active = false;
	CustomName = "Debug";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_04CA558C";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_04CA558C
{
	Expression = "function void	Eval()
{
	float4 OutColor;
	float3 ValueC = rgb2hsv(Color.rgb);
	ValueC = float3(ValueC.r,0,ValueC.b);
	ValueC = hsv2rgb(ValueC);
	float3 DebugCol = rgb2hsv(Color.rgb);
	DebugCol = float3(DebugCol.r,DebugCol.g,1);
	DebugCol = hsv2rgb(DebugCol);
	OutColor = select(float4(ValueC,Color.a), float4(DebugCol,Color.a),DebugValueColor);
	Color = select(Color,OutColor,DebugValueColorActivation);
	// rgb2hsv(c)
	// hsv2rgb(c)
}
";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_FD099D3F
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_D328D56E";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_D328D56E
{
	Times = 
	{
		0.0000000e+000,
		6.3953824e-002,
		1.8928063e-001,
		3.3756623e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		4.0719014e-001,
		4.0988779e-001,
		6.6928124e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		3.8616624e-002,
		7.5674884e-002,
		-9.4239004e-003,
		-1.1150277e-002,
		7.5898898e-001,
		-1.9907228e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CActionFactoryParticleSpawnerBase	$LOCAL$/RayBack02
{
	Descriptor = "$LOCAL$/CParticleDescriptor_EA3A0A3C";
	Infinite = true;
	DurationInSeconds = 3.4999999e-001;
	SpawnCount = 5.0000000e+001;
	ContinuousSpawner = false;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_673D414E
{
	DrawOrder = 6;
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	SoftnessDistance = 5.0000001e-002;
	AxisScale = 2.5000000e-001;
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Chain
{
	Descriptor = "$LOCAL$/CParticleDescriptor_6128E19F";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 2.1000000e+001;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_6128E19F
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_C39BD2E2";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_E71217E3",
		"$LOCAL$/CParticleFieldDeclaration_7D2AE2D5",
		"$LOCAL$/CParticleFieldDeclaration_91391B2F",
		"$LOCAL$/CParticleFieldDeclaration_D3686077",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_0F98BD06",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_FE973329";
	States = 
	{
		"$LOCAL$/CParticleState_B0AD9A4D",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_FE973329
{
	Expression = "function void	Eval()
{
	Life = 1.0;
	Size = 0.1;
	Color = float4(1.0);
	float x = spawner.EmittedCount%21;
	x /= 10;
	//ID = int(x*10);
	Alpha = AlphaCurve.sample((x/2));
	x *= 1 + Size;
	float y = 0;
	float z = 0;
	Position = float3(x,y,z);
	PositionOrig = Position;
	Axis = float3(WingFlip+1.8,0,0);
	TextureID = 0;
	//Begin=1;
	
	
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_E71217E3
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_C39BD2E2
{
	DrawOrder = 4;
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend;
	Diffuse = "Textures/vfx_circle_fb2x2_01.dds";
	AtlasDefinition = "AtlasDefinitions/atlasDef_2x2.pkat";
	SortMode = FieldDescending;
	SortField = "LifeRatio";
	BillboardMode = VelocityAxisAligned;
	AxisField = "Axis";
	AxisScale = 7.9999998e-002;
}
CParticleState	$LOCAL$/CParticleState_B0AD9A4D
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_876F8C39",
		"$LOCAL$/LocalSpace_1",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_7D2AE2D5
{
	FieldName = "Axis";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleEvolver_Script	$LOCAL$/Script_2
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_E2381FBC";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E2381FBC
{
	Expression = "function void	Eval()
{	
	
	float Px = 0;
	float Py = sin(LifeRatio*3*pi)*Size*0.5 * Alpha;
	float Pz = sin(LifeRatio*3*pi)*Size*0.5 * Alpha;
	Position = PositionOrig + float3(Px, Py, Pz);
	Position = rotate(Position, float3(0,0,1), pi*0.15);
	Position = rotate(Position, float3(0,1,0), -pi*0.2);
	//Ball.trigger(ID>19&& Begin == 1, Position, float3(1,0,0), float3(0,1,0));
	//Begin = 0;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_91391B2F
{
	FieldName = "PositionOrig";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_405E321E
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,1,Alpha);
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,Alpha);//ColorCoeff;
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_876F8C39
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_405E321E";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D3686077
{
	FieldName = "Alpha";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_0F98BD06
{
	SamplerName = "AlphaCurve";
	Times = 
	{
		0.0000000e+000,
		2.0140162e-001,
		5.2509815e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		1.4076969e-001,
		9.9365389e-001,
		9.9083960e-001,
		1.4495477e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		5.9729867e-002,
		2.7939924e-003,
		4.4905581e-003,
		2.1970980e-003,
		3.2234078e-003,
		-1.8844429e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_1
{
	CustomName = "Localspace";
	ChildList = 
	{
		"$LOCAL$/Script_2",
	};
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_31C28EEA
{
	Renderer = "$LOCAL$/CParticleRenderer_List_9EA582F5";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_3ADC27BE",
		"$LOCAL$/CParticleFieldDeclaration_2D43E259",
		"$LOCAL$/CParticleFieldDeclaration_D1719390",
		"$LOCAL$/CParticleFieldDeclaration_0D36F193",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerDoubleCurve_2DBFD652",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_C0872A7D";
	States = 
	{
		"$LOCAL$/CParticleState_22A8AC84",
	};
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_9EA582F5
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Billboard_AF99325C",
		"$LOCAL$/CParticleRenderer_Billboard_BCF0524F",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_AF99325C
{
	DrawOrder = 6;
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	AlphaRemapper = "Textures/vfx_alphaRemapDissolve_03.dds";
	SoftnessDistance = 5.0000001e-002;
	BillboardMode = PlanarAlignedQuad;
	AlphaCursorField = "Alpha";
	AxisField = "AxisUp";
	Axis2Field = "Axis";
	AxisScale = 1.0000000e+000;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_BCF0524F
{
	DrawOrder = 3;
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend_Additive_Soft;
	Diffuse = "Textures/vfx_rays_03.DDS";
	SoftnessDistance = 5.0000001e-002;
	SizeField = "Size2";
	AxisField = "AxisUp";
	Axis2Field = "Axis";
	AxisScale = 1.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_3ADC27BE
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_2D43E259
{
	FieldName = "Alpha";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D1719390
{
	FieldName = "Axis";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_0D36F193
{
	FieldName = "AxisUp";
	FieldType = float3;
}
CParticleSamplerDoubleCurve	$LOCAL$/CParticleSamplerDoubleCurve_2DBFD652
{
	SamplerName = "Fire_Size";
	Times = 
	{
		0.0000000e+000,
		3.1854644e-001,
		5.7913405e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		8.0873668e-003,
		2.3137708e-001,
		3.0631548e-001,
		1.6911386e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		1.6666782e-001,
		6.4304657e-002,
		5.2604567e-002,
		-8.2665563e-002,
		-1.3351028e-001,
		4.4405454e-001,
		0.0000000e+000,
	};
	Times1 = 
	{
		0.0000000e+000,
		3.1740305e-001,
		5.7856232e-001,
		1.0000000e+000,
	};
	FloatValues1 = 
	{
		2.8714418e-002,
		2.9660782e-001,
		3.4725821e-001,
		1.7617647e-001,
	};
	FloatTangents1 = 
	{
		0.0000000e+000,
		-2.4532381e-002,
		-2.3258692e-002,
		-1.9137256e-002,
		-7.7979453e-002,
		-1.2583692e-001,
		4.8443303e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_C0872A7D
{
	Expression = "function void	Eval()

{
	Life = rand(0.9,1);
	Velocity = float3(1.5*WingFlip,1.0,sin(spawner.Age*4)+rand(-0.5,0.5)-0.5)*2.5;//1,-1.9
	//AxisStretch = Velocity;
	ScalarRotationSpeed = rand(-1,1);
	Position = float3(0.0,0.1,-0.03);
	Axis = normalize(Velocity+ vrand(-0.25,0.25));
	AxisUp = cross(Position, Axis);
	Rotation = rand(-pi,pi);
}";
}
CParticleState	$LOCAL$/CParticleState_22A8AC84
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_D122C397",
		"$LOCAL$/CParticleEvolver_Rotation_B1834EA6",
		"$LOCAL$/CParticleEvolver_Script_019D1F61",
		"$LOCAL$/CParticleEvolver_Localspace_12F66C5B",
		"$LOCAL$/CParticleEvolver_Script_FA8C04BA",
		"$LOCAL$/CParticleEvolver_Script_675115AC",
		"$LOCAL$/CParticleEvolver_Field_2A232C8E",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_D122C397
{
	CustomName = "Physics";
	Drag = 3.0000000e+000;
}
CParticleEvolver_Rotation	$LOCAL$/CParticleEvolver_Rotation_B1834EA6
{
	CustomName = "Rotation";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_019D1F61
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_BD5D9138";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_BD5D9138
{
	Expression = "function void	Eval()

{
	

	Size = 	Fire_Size.sample(LifeRatio,1);
	Size2 = Size *0.7;

}";
}
CParticleEvolver_Localspace	$LOCAL$/CParticleEvolver_Localspace_12F66C5B
{
	CustomName = "Localspace";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_FA8C04BA
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_455E4505";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_455E4505
{
	Expression = "function void	Eval()
{
	float Offset = 0.0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.8,0.7*Alpha);
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,Alpha);//ColorCoeff;
	Color = ColorOut *1.5;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_675115AC
{
	Active = false;
	CustomName = "Debug";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_FC594FDF";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_FC594FDF
{
	Expression = "function void	Eval()
{
	float4 OutColor;
	float3 ValueC = rgb2hsv(Color.rgb);
	ValueC = float3(ValueC.r,0,ValueC.b);
	ValueC = hsv2rgb(ValueC);
	float3 DebugCol = rgb2hsv(Color.rgb);
	DebugCol = float3(DebugCol.r,DebugCol.g,1);
	DebugCol = hsv2rgb(DebugCol);
	OutColor = select(float4(ValueC,Color.a), float4(DebugCol,Color.a),DebugValueColor);
	Color = select(Color,OutColor,DebugValueColorActivation);
	// rgb2hsv(c)
	// hsv2rgb(c)
}
";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_2A232C8E
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_D971DF69";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_D971DF69
{
	Times = 
	{
		0.0000000e+000,
		3.2183252e-002,
		5.8599615e-001,
		6.0034317e-001,
		9.4373715e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		4.0996969e-003,
		2.4039772e-001,
		2.6292771e-001,
		9.7564590e-001,
		9.8482490e-001,
		-8.1647187e-004,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		2.0853432e-002,
		-8.1348512e-003,
		-1.3998541e-001,
		-2.0052256e-001,
		1.4921848e-001,
		-2.1035180e-003,
		-5.0347429e-002,
		-8.0741085e-002,
		-8.7189050e-003,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Layer_2
{
	Descriptor = "$LOCAL$/CParticleDescriptor_31C28EEA";
	Infinite = true;
	DurationInSeconds = 3.4999999e-001;
	SpawnCount = 1.0000000e+001;
	ContinuousSpawner = false;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_455B9223
{
	Renderer = "$LOCAL$/CParticleRenderer_List_27C9BA22";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_6A3A1727",
		"$LOCAL$/CParticleFieldDeclaration_684C6176",
		"$LOCAL$/CParticleFieldDeclaration_214F4271",
		"$LOCAL$/CParticleFieldDeclaration_67E9E988",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerDoubleCurve_0BE282EB",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_D697968A";
	States = 
	{
		"$LOCAL$/CParticleState_6D355315",
	};
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_27C9BA22
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Billboard_6E31F28D",
		"$LOCAL$/CParticleRenderer_Billboard_61980DD4",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_6E31F28D
{
	DrawOrder = 6;
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	AlphaRemapper = "Textures/vfx_alphaRemapDissolve_07.DDS";
	SoftnessDistance = 5.0000001e-002;
	BillboardMode = PlanarAlignedQuad;
	AlphaCursorField = "Alpha";
	AxisField = "AxisUp";
	Axis2Field = "Axis";
	AxisScale = 1.0000000e+000;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_61980DD4
{
	DrawOrder = 3;
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend_Additive_Soft;
	Diffuse = "Textures/vfx_rays_03.DDS";
	SoftnessDistance = 5.0000001e-002;
	SizeField = "Size2";
	AxisField = "AxisUp";
	Axis2Field = "Axis";
	AxisScale = 1.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_6A3A1727
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_684C6176
{
	FieldName = "Alpha";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_214F4271
{
	FieldName = "Axis";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_67E9E988
{
	FieldName = "AxisUp";
	FieldType = float3;
}
CParticleSamplerDoubleCurve	$LOCAL$/CParticleSamplerDoubleCurve_0BE282EB
{
	SamplerName = "Fire_Size";
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		8.0873668e-003,
		2.2684415e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		5.2321357e-001,
		-6.1661953e-001,
		0.0000000e+000,
	};
	Times1 = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues1 = 
	{
		2.8714418e-002,
		2.3390678e-001,
	};
	FloatTangents1 = 
	{
		0.0000000e+000,
		-7.7290945e-002,
		-3.2634917e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_D697968A
{
	Expression = "function void	Eval()

{
	Life = rand(0.9,1);
	Velocity = float3((sin(-spawner.Age*4)+1)*WingFlip,sin(-spawner.Age*8),sin(-spawner.Age*4)-2)*2;
	//AxisStretch = Velocity;
	ScalarRotationSpeed = rand(-1,1);
	Position = float3(0.0,0.1,-0.03);
	Axis = normalize(Velocity+ vrand(-0.25,0.25));
	AxisUp = cross(Position, Axis);
	Rotation = rand(-pi,pi);
}";
}
CParticleState	$LOCAL$/CParticleState_6D355315
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_E81F34FC",
		"$LOCAL$/CParticleEvolver_Rotation_9F37396F",
		"$LOCAL$/CParticleEvolver_Script_D24B8D5E",
		"$LOCAL$/CParticleEvolver_Localspace_B66D8430",
		"$LOCAL$/CParticleEvolver_Script_4F135EB3",
		"$LOCAL$/CParticleEvolver_Script_4647869D",
		"$LOCAL$/CParticleEvolver_Field_B50ED6B7",
	};
}
CParticleEvolver_Rotation	$LOCAL$/CParticleEvolver_Rotation_9F37396F
{
	CustomName = "Rotation";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_D24B8D5E
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_012E6879";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_012E6879
{
	Expression = "function void	Eval()

{
	

	Size = 	Fire_Size.sample(LifeRatio,1);
	Size2 = Size *0.5;

}";
}
CParticleEvolver_Localspace	$LOCAL$/CParticleEvolver_Localspace_B66D8430
{
	CustomName = "Localspace";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_4F135EB3
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_F81039F2";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_F81039F2
{
	Expression = "function void	Eval()
{
	float Offset = -0.250;
	float Scale = 0.5;
	float3 RGB = Curve_1.sample((1-(sin(LifeRatio*2)*Scale))+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,0.5*Alpha);
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,Alpha);//ColorCoeff;
	Color = ColorOut *1.5;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_4647869D
{
	Active = false;
	CustomName = "Debug";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_EEA42B24";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_EEA42B24
{
	Expression = "function void	Eval()
{
	float4 OutColor;
	float3 ValueC = rgb2hsv(Color.rgb);
	ValueC = float3(ValueC.r,0,ValueC.b);
	ValueC = hsv2rgb(ValueC);
	float3 DebugCol = rgb2hsv(Color.rgb);
	DebugCol = float3(DebugCol.r,DebugCol.g,1);
	DebugCol = hsv2rgb(DebugCol);
	OutColor = select(float4(ValueC,Color.a), float4(DebugCol,Color.a),DebugValueColor);
	Color = select(Color,OutColor,DebugValueColorActivation);
	// rgb2hsv(c)
	// hsv2rgb(c)
}
";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_B50ED6B7
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_27A95046";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_27A95046
{
	Times = 
	{
		0.0000000e+000,
		6.1240420e-002,
		2.4930286e-001,
		3.8629612e-001,
		5.1343781e-001,
		5.4913700e-001,
		7.1511537e-001,
		7.5592470e-001,
		8.2408178e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		4.0996969e-003,
		2.5856736e-001,
		2.8427127e-001,
		9.8081672e-001,
		9.7476971e-001,
		5.1070809e-001,
		5.0481904e-001,
		9.8511899e-001,
		9.9921715e-001,
		-8.1647187e-004,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		3.9681289e-002,
		2.7695436e-002,
		8.5049585e-002,
		4.0544953e-002,
		2.9534793e-002,
		4.8195787e-002,
		4.4729892e-002,
		2.6300900e-002,
		-1.0093049e-001,
		-9.0235630e-003,
		-4.1953791e-002,
		-6.0096841e-002,
		4.2444411e-001,
		-5.9833461e-003,
		-9.9929925e-003,
		-1.6025547e-002,
		-2.7261581e-002,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Layer_3
{
	Descriptor = "$LOCAL$/CParticleDescriptor_455B9223";
	Infinite = true;
	DurationInSeconds = 3.4999999e-001;
	SpawnCount = 1.0000000e+001;
	ContinuousSpawner = false;
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_E81F34FC
{
	CustomName = "Physics";
	Drag = 2.0000000e+000;
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_E3C7C79B
{
	CustomName = "Physics";
	Drag = 3.0000000e+000;
}
CParticleEvolver_Spawner	$LOCAL$/Trail_1
{
	CustomName = "Spawner";
	SpawnInterval = 5.0000000e-001;
	FirstSpawnDelay = 5.0000000e-001;
	Descriptor = "$LOCAL$/CParticleDescriptor_FE973329";
}
CParticleState	$LOCAL$/CParticleState_6128E19F
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_E2381FBC",
		"$LOCAL$/CParticleEvolver_Field_405E321E",
		"$LOCAL$/CParticleEvolver_Script_7C2F92F0",
		"$LOCAL$/CParticleEvolver_Field_2C0DE2B2",
	};
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_FE973329
{
	Renderer = "$LOCAL$/CParticleRenderer_List_2921F74A";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_B0AD9A4D",
		"$LOCAL$/CParticleFieldDeclaration_F78DFE5D",
		"$LOCAL$/CParticleFieldDeclaration_526C1DE4",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_E71217E3";
	States = 
	{
		"$LOCAL$/CParticleState_6128E19F",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E71217E3
{
	Expression = "function void	Eval()
{
	Life = 4.0;
	Size = 0.09;
	//Velocity = scene.axisUp();
	Color = float4(1.0);
	//Position = float3(1.6,1,1.5)*0.25;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_B0AD9A4D
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleRenderer_Ribbon	$LOCAL$/CParticleRenderer_Ribbon_34FEFE31
{
	CustomName = "Ribbon";
	Diffuse = "Textures/vfx_gradient_03_alpha.dds";
	ColorField = "Color2";
	WidthField = "Size2";
}
CParticleRenderer_Ribbon	$LOCAL$/CParticleRenderer_Ribbon_7A7E30AB
{
	DrawOrder = 1;
	CustomName = "Ribbon";
	BillboardingMaterial = AlphaBlend;
	Diffuse = "Textures/vfx_gradient_soft.dds";
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_2921F74A
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Ribbon_34FEFE31",
		"$LOCAL$/CParticleRenderer_Ribbon_7A7E30AB",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_7D2AE2D5
{
	Expression = "function void	Eval()
{	
	Size2 = Size *2;
	//Color2 =  Color * 1-LifeRatio;
}
";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_E2381FBC
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_7D2AE2D5";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_91391B2F
{
	Times = 
	{
		0.0000000e+000,
		1.3554376e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		-3.1909347e-003,
		1.1798482e-001,
		3.6236957e-002,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		8.6134724e-002,
		-8.1427004e-003,
		-5.1931627e-002,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_405E321E
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_91391B2F";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_876F8C39
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.75,1.5 * Alpha);
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,Alpha);//ColorCoeff;
	Color = ColorOut *1;
	Color2 = ColorOut *0.75*(1-LifeRatio);
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_7C2F92F0
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_876F8C39";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_87A33473
{
	Times = 
	{
		0.0000000e+000,
		4.7046828e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		9.6596044e-001,
		8.9030474e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_2C0DE2B2
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_87A33473";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_F78DFE5D
{
	FieldName = "Alpha";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_526C1DE4
{
	FieldName = "Color2";
	FieldType = float4;
}
