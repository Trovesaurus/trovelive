Version = 1.13.4.53415;
Generator = EDITOR;
CParticleEffect	$LOCAL$/Resource
{
	OnSpawn = "$LOCAL$/Spawner";
	CustomAttributes = "$LOCAL$/_GlobalAttributes";
}
CNEdEditorParticle_Data	$LOCAL$/EDITOR
{
	Position = float3(-1.6520567e+000, 1.7451236e+000, -9.4285214e-001);
	EulerOrientation = float3(-3.8269138e+001, 2.2653421e+002, 0.0000000e+000);
	PostFx_EnableGlow = false;
	Backdrops = "$LOCAL$/_BackdropList";
}
CActionFactoryWithChilds	$LOCAL$/Spawner
{
	ChildList = 
	{
		"$LOCAL$/TopSmall",
		"$LOCAL$/BottomSmall",
		"$LOCAL$/BigLeft",
		"$LOCAL$/BigRight",
		"$LOCAL$/Glow01",
		"$LOCAL$/Glow02Cam",
		"$LOCAL$/LightRayTL",
		"$LOCAL$/LightRayTR",
		"$LOCAL$/LightRayBL",
		"$LOCAL$/LightRayBR",
		"$LOCAL$/BackEmbers",
		"$LOCAL$/Layer_1",
		"$LOCAL$/Layer_2",
	};
}
CNEdEditorBackdrop_List	$LOCAL$/_BackdropList
{
	EditorInfosPosition = int2(-100, -365);
	BackgroundLayers2D = 
	{
		"$LOCAL$/_Backdrop_Brush",
	};
	SceneLayers3D = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Effect_FE973329",
	};
	IsSceneLayers3DExpanded = true;
}
CParticleAttributeList	$LOCAL$/_GlobalAttributes
{
	AttributeList = 
	{
		"$LOCAL$/CParticleAttributeDeclaration_D121F1C0",
		"$LOCAL$/CParticleAttributeDeclaration_1C23DDFA",
	};
	SamplerList = 
	{
		"$LOCAL$/CParticleSamplerCurve_DE16351A",
	};
}
CNEdEditorBackdrop_Brush	$LOCAL$/_Backdrop_Brush
{
	EditorInfosPosition = int2(-253, -417);
	LayerName = "Layer_Brush";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_D121F1C0
{
	AttributeName = "WidthControl";
	DefaultValueF4 = float4(1.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_1C23DDFA
{
	AttributeName = "KillAllOnDespawn";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CNEdEditorBackdrop_Effect	$LOCAL$/CNEdEditorBackdrop_Effect_FE973329
{
	LayerName = "Effect_1";
	ResourceEffect = "Particles/TEST_Sword_Aura.pkfx";
	IsActive = false;
}
CActionFactoryParticleSpawnerBase	$LOCAL$/TopSmall
{
	Descriptor = "$LOCAL$/CParticleDescriptor_A33BCCA0";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_A33BCCA0
{
	Renderer = "$LOCAL$/CParticleRenderer_List_673D414E";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_C39BD2E2",
		"$LOCAL$/CParticleFieldDeclaration_7A7E30AB",
		"$LOCAL$/CParticleFieldDeclaration_31C28EEA",
		"$LOCAL$/CParticleFieldDeclaration_D724F094",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_E71217E3";
	States = 
	{
		"$LOCAL$/CParticleState_D724F094",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E71217E3
{
	Expression = "function void	Eval()
{
	Life = 1.50;
	Size = 0.04;
	Velocity = float3(0,0,1);
	Color = float4(1.0);
	Normal = float3(0,1,0);
	Position = float3(0.025,0.11,0.15);
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_C39BD2E2
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleState	$LOCAL$/CParticleState_D724F094
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_9A4350E7",
		"$LOCAL$/Field_2",
		"$LOCAL$/CParticleEvolver_Script_FC3A8B0C",
		"$LOCAL$/Field_1",
		"$LOCAL$/LocalSpace_12",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_9A4350E7
{
	CustomName = "Physics";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_7A7E30AB
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_7D2AE2D5
{
	Renderer = "$LOCAL$/CParticleRenderer_List_D6CD3E36";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_91391B2F",
		"$LOCAL$/CParticleFieldDeclaration_405E321E",
		"$LOCAL$/CParticleFieldDeclaration_9EA582F5",
		"$LOCAL$/CParticleFieldDeclaration_F78DFE5D",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_876F8C39";
	States = 
	{
		"$LOCAL$/CParticleState_7C2F92F0",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_91391B2F
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_405E321E
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_876F8C39
{
	Expression = "function void	Eval()
{
	Life =1.5;
	Size = 0.04;
	Velocity = float3(0,0,1);
	Color = float4(1.0);
	Normal = float3(0,1,0);
	Position = float3(0.025,-0.09,0.15);
}
";
}
CParticleState	$LOCAL$/CParticleState_7C2F92F0
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_87A33473",
		"$LOCAL$/CParticleEvolver_Field_BCF0524F",
		"$LOCAL$/CParticleEvolver_Script_2C0DE2B2",
		"$LOCAL$/CParticleEvolver_Field_3BE17EEE",
		"$LOCAL$/LocalSpace_11",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_87A33473
{
	CustomName = "Physics";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/BottomSmall
{
	Descriptor = "$LOCAL$/CParticleDescriptor_7D2AE2D5";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_D3686077
{
	Renderer = "$LOCAL$/CParticleRenderer_List_405E321E";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_A06DFD41",
		"$LOCAL$/CParticleFieldDeclaration_AE4ED498",
		"$LOCAL$/CParticleFieldDeclaration_3ADC27BE",
		"$LOCAL$/CParticleFieldDeclaration_526C1DE4",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_DE35433B";
	States = 
	{
		"$LOCAL$/CParticleState_DE16351A",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_A06DFD41
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_AE4ED498
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_DE35433B
{
	Expression = "function void	Eval()
{
	Life = 1.5;
	Size = 0.15;
	Velocity = float3(0,0,1);
	Color = float4(1.0);
	Normal = float3(-1,0,0);
	Position = float3(0.12,0.01,0.15);
}
";
}
CParticleState	$LOCAL$/CParticleState_DE16351A
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_42820CE5",
		"$LOCAL$/CParticleEvolver_Field_D1719390",
		"$LOCAL$/CParticleEvolver_Script_0F98BD06",
		"$LOCAL$/CParticleEvolver_Field_39ED8E82",
		"$LOCAL$/LocalSpace_10",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_42820CE5
{
	CustomName = "Physics";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/BigLeft
{
	Descriptor = "$LOCAL$/CParticleDescriptor_D3686077";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_82EB7149
{
	Renderer = "$LOCAL$/CParticleRenderer_List_2C0DE2B2";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_43F47D03",
		"$LOCAL$/CParticleFieldDeclaration_39ED8E82",
		"$LOCAL$/CParticleFieldDeclaration_0D36F193",
		"$LOCAL$/CParticleFieldDeclaration_DE35433B",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_DF5E2E6D";
	States = 
	{
		"$LOCAL$/CParticleState_E2390734",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_43F47D03
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_39ED8E82
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_DF5E2E6D
{
	Expression = "function void	Eval()
{
	Life = 1.5;
	Size = 0.15;
	Velocity = float3(0,0,1);
	Color = float4(1.0);
	Normal = float3(-1,0,0);
	Position = float3(-0.035,0.01,0.15);
}
";
}
CParticleState	$LOCAL$/CParticleState_E2390734
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_6067DC07",
		"$LOCAL$/CParticleEvolver_Field_C0872A7D",
		"$LOCAL$/CParticleEvolver_Script_42820CE5",
		"$LOCAL$/CParticleEvolver_Field_BF87D540",
		"$LOCAL$/LocalSpace_9",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_6067DC07
{
	CustomName = "Physics";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/BigRight
{
	Descriptor = "$LOCAL$/CParticleDescriptor_82EB7149";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CParticleEvolver_Field	$LOCAL$/Field_2
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_A92D01CB";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_A92D01CB
{
	Times = 
	{
		0.0000000e+000,
		4.9760318e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		-1.0160893e-002,
		9.7897696e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		-1.1906312e-001,
		-3.7942901e-001,
		-2.7069249e+000,
		1.7124687e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_31C28EEA
{
	FieldName = "Alpha";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_9EA582F5
{
	FieldName = "Alpha";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_AF99325C
{
	Times = 
	{
		0.0000000e+000,
		4.9760318e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		-1.0160893e-002,
		9.7897696e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		-1.1906312e-001,
		-3.7942901e-001,
		-2.7069249e+000,
		-1.8381388e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_BCF0524F
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_AF99325C";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_3ADC27BE
{
	FieldName = "Alpha";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_2D43E259
{
	Times = 
	{
		0.0000000e+000,
		4.9760318e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		-1.0160893e-002,
		9.7897696e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		-1.1906312e-001,
		-3.7942901e-001,
		-2.7069249e+000,
		1.7124687e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_D1719390
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_2D43E259";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_0D36F193
{
	FieldName = "Alpha";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_2DBFD652
{
	Times = 
	{
		0.0000000e+000,
		4.9760318e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		-1.0160893e-002,
		9.7897696e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		-1.1906312e-001,
		-3.7942901e-001,
		-2.7069249e+000,
		1.7124687e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_C0872A7D
{
	CustomName = "Field";
	Name = "Alpha";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_2DBFD652";
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_673D414E
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Ribbon_FE973329",
	};
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_D6CD3E36
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Ribbon_7A7E30AB",
	};
}
CParticleRenderer_Ribbon	$LOCAL$/CParticleRenderer_Ribbon_7A7E30AB
{
	CustomName = "Ribbon";
	Diffuse = "Textures/vfx_gradient_06.dds";
	AlphaRemapper = "Textures/vfx_alphaRemapDissolve_05.dds";
	SoftnessDistance = 9.9999998e-003;
	AlphaCursorField = "Alpha";
	BillboardMode = NormalAxisAligned;
	AxisField = "Normal";
}
CParticleRenderer_Ribbon	$LOCAL$/CParticleRenderer_Ribbon_E2381FBC
{
	CustomName = "Ribbon";
	Quality = CorrectDeformation;
	Diffuse = "Textures/vfx_gradient_06.dds";
	AlphaRemapper = "Textures/vfx_alphaRemapDissolve_05.dds";
	SoftnessDistance = 9.9999998e-003;
	AlphaCursorField = "Alpha";
	BillboardMode = NormalAxisAligned;
	AxisField = "Normal";
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_405E321E
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Ribbon_E2381FBC",
	};
}
CParticleRenderer_Ribbon	$LOCAL$/CParticleRenderer_Ribbon_7C2F92F0
{
	CustomName = "Ribbon";
	Quality = CorrectDeformation;
	Diffuse = "Textures/vfx_gradient_06.dds";
	AlphaRemapper = "Textures/vfx_alphaRemapDissolve_05.dds";
	SoftnessDistance = 9.9999998e-003;
	AlphaCursorField = "Alpha";
	BillboardMode = NormalAxisAligned;
	AxisField = "Normal";
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_2C0DE2B2
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Ribbon_7C2F92F0",
	};
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Glow01
{
	Descriptor = "$LOCAL$/CParticleDescriptor_F78DFE5D";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_F78DFE5D
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_0F98BD06";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_D3686077",
		"$LOCAL$/CParticleFieldDeclaration_DF5E2E6D",
		"$LOCAL$/CParticleFieldDeclaration_E2390734",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_526C1DE4";
	States = 
	{
		"$LOCAL$/CParticleState_A06DFD41",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_526C1DE4
{
	Expression = "function void	Eval()
{
	Life = 1.5;
	Size = 0.09;
	
	Color = float4(1.0);
	Position = float3(0.025,0,0.18);
	AxisUp = float3(0,0,1);
	Axis = float3(0,1,0);
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D3686077
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_0F98BD06
{
	CustomName = "Billboard";
	BillboardingMaterial = Additive_Soft;
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	SoftnessDistance = 2.0000000e-001;
	BillboardMode = PlanarAlignedQuad;
	AxisField = "Axis";
	Axis2Field = "AxisUp";
	AxisScale = 1.0000000e+000;
}
CParticleState	$LOCAL$/CParticleState_A06DFD41
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_AE4ED498",
		"$LOCAL$/Field_3",
		"$LOCAL$/CParticleEvolver_Script_6067DC07",
		"$LOCAL$/LocalSpace_8",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_AE4ED498
{
	CustomName = "Physics";
}
CParticleEvolver_Field	$LOCAL$/Field_3
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_DE35433B";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_DE35433B
{
	Times = 
	{
		0.0000000e+000,
		4.5605859e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		8.5179156e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		-8.4016919e-002,
		-1.0020704e-001,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_DE16351A
{
	SamplerName = "Curve_1";
	ValueType = Float3;
	Interpolator = Linear;
	Times = 
	{
		0.0000000e+000,
		2.7766120e-001,
		3.0205205e-001,
		3.4843531e-001,
		5.8928537e-001,
		6.5161443e-001,
		6.6596043e-001,
		7.4857950e-001,
		7.9553187e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		8.2352942e-001,
		4.9411768e-001,
		2.3529410e-002,
		9.8431373e-001,
		6.7843145e-001,
		3.1372551e-002,
		1.0000000e+000,
		7.9607844e-001,
		2.7058828e-001,
		5.4509819e-001,
		1.7254902e-001,
		7.2156864e-001,
		5.5501205e-001,
		1.7437525e-001,
		7.2313398e-001,
		6.9411778e-001,
		2.0000000e-001,
		7.4509805e-001,
		9.2016929e-001,
		2.2605163e-001,
		6.5350252e-001,
		9.5294118e-001,
		2.5490198e-001,
		5.0196064e-001,
		1.6862744e-001,
		8.1176472e-001,
		7.3725498e-001,
		3.1372553e-001,
		9.1764706e-001,
		7.9215682e-001,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_42820CE5
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.75;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,2* LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB*Alpha,1);//ColorCoeff;
	
	
	
	Color = ColorOut;
	RGB = Curve_1.sample((LifeRatio));
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.75,2);
	RGB = hsv2rgb(RGB);
	ColorOut = float4(RGB,Alpha);
	Color2 = ColorOut;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_FC3A8B0C
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_42820CE5";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E2390734
{
	Expression = "function void	Eval()
{
	float Offset = 0.25;
	float Scale = 0.5;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.8,0.5 * LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,1-LifeRatio);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_6067DC07
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_E2390734";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D724F094
{
	FieldName = "Color2";
	FieldType = float4;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_87A33473
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.75;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,2* LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB*Alpha,1);//ColorCoeff;
	
	
	
	Color = ColorOut;
	RGB = Curve_1.sample((LifeRatio));
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.75,2);
	RGB = hsv2rgb(RGB);
	ColorOut = float4(RGB,Alpha);
	Color2 = ColorOut;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_2C0DE2B2
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_87A33473";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_F78DFE5D
{
	FieldName = "Color2";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_526C1DE4
{
	FieldName = "Color2";
	FieldType = float4;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_D3686077
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.75;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,2* LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB*Alpha,1);//ColorCoeff;
	
	
	
	Color = ColorOut;
	RGB = Curve_1.sample((LifeRatio));
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.75,2);
	RGB = hsv2rgb(RGB);
	ColorOut = float4(RGB,Alpha);
	Color2 = ColorOut;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_0F98BD06
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_D3686077";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_DE35433B
{
	FieldName = "Color2";
	FieldType = float4;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_DE16351A
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.75;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,2* LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB*Alpha,1);//ColorCoeff;
	
	
	
	Color = ColorOut;
	RGB = Curve_1.sample((LifeRatio*1));
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.75,2);
	RGB = hsv2rgb(RGB);
	ColorOut = float4(RGB,Alpha);
	Color2 = ColorOut;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_42820CE5
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_DE16351A";
}
CParticleEvolver_Field	$LOCAL$/Field_1
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_FC3A8B0C";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_FC3A8B0C
{
	Times = 
	{
		0.0000000e+000,
		3.7557909e-001,
		7.7622479e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		9.8369032e-002,
		9.6873119e-002,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		-2.9663001e-003,
		1.4538800e-002,
		1.5509139e-002,
		4.4649886e-003,
		2.4938588e-003,
		-8.9880541e-002,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_4BFB40BF
{
	Times = 
	{
		0.0000000e+000,
		3.7557909e-001,
		7.7622479e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		9.8369032e-002,
		9.6873119e-002,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		-2.9663001e-003,
		1.4538800e-002,
		1.5509139e-002,
		4.4649886e-003,
		2.4938588e-003,
		-8.9880541e-002,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_3BE17EEE
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_4BFB40BF";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_82EB7149
{
	Times = 
	{
		0.0000000e+000,
		2.7177140e-001,
		8.1301790e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		1.6524005e-001,
		1.6629547e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		-2.1464336e-003,
		2.9188432e-003,
		5.8130245e-003,
		6.0319118e-003,
		2.0838184e-003,
		-7.5102389e-002,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_BF87D540
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_82EB7149";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_43F47D03
{
	Times = 
	{
		0.0000000e+000,
		2.7177140e-001,
		8.1301790e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		2.3100430e-001,
		2.3205979e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		-2.1464340e-003,
		2.9188429e-003,
		5.8130240e-003,
		6.0319118e-003,
		2.0838180e-003,
		-7.5102389e-002,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_39ED8E82
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_43F47D03";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_DF5E2E6D
{
	FieldName = "Axis";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_E2390734
{
	FieldName = "AxisUp";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_6067DC07
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_5ED917D6";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_22C50851",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_31C28EEA";
	States = 
	{
		"$LOCAL$/CParticleState_9EA582F5",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_5ED917D6
{
	CustomName = "Billboard";
	BillboardingMaterial = Additive_Soft;
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	SoftnessDistance = 2.0000000e-001;
	AxisField = "Axis";
	Axis2Field = "AxisUp";
	AxisScale = 1.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_22C50851
{
	FieldName = "Color";
	FieldType = float4;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_31C28EEA
{
	Expression = "function void	Eval()
{
	Life = 1.5;
	Size = 0.09;
	
	Color = float4(1.0);
	Position = float3(0.025,0,0.2);
	
}
";
}
CParticleState	$LOCAL$/CParticleState_9EA582F5
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_AF99325C",
		"$LOCAL$/CParticleEvolver_Field_3ADC27BE",
		"$LOCAL$/CParticleEvolver_Script_0D36F193",
		"$LOCAL$/LocalSpace_7",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_AF99325C
{
	CustomName = "Physics";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_3ADC27BE
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_D1719390";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_D1719390
{
	Times = 
	{
		0.0000000e+000,
		4.6085218e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		4.5408222e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		-8.4900014e-002,
		-9.9323958e-002,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_0D36F193
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_2DBFD652";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_2DBFD652
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,1 * LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,1-LifeRatio);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Glow02Cam
{
	Descriptor = "$LOCAL$/CParticleDescriptor_6067DC07";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CActionFactoryParticleSpawnerBase	$LOCAL$/LightRayTL
{
	Descriptor = "$LOCAL$/CParticleDescriptor_6128E19F";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_6128E19F
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_A33BCCA0";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_FE973329",
		"$LOCAL$/CParticleFieldDeclaration_B0AD9A4D",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_673D414E";
	States = 
	{
		"$LOCAL$/CParticleState_E71217E3",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_673D414E
{
	Expression = "function void	Eval()
{
	Life = 1.5;
	Size = 0.05;
	//Velocity = scene.axisUp();
	Color = float4(1.0);
	Position = float3(0.12,0.1,0.75);
	Axis = float3(0,0,1);
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_FE973329
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_A33BCCA0
{
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	BillboardMode = VelocityAxisAligned;
	AxisField = "Axis";
	AxisScale = 1.5000000e+000;
}
CParticleState	$LOCAL$/CParticleState_E71217E3
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_C39BD2E2",
		"$LOCAL$/CParticleEvolver_Script_9A4350E7",
		"$LOCAL$/LocalSpace_6",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_C39BD2E2
{
	CustomName = "Physics";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_B0AD9A4D
{
	FieldName = "Axis";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_D724F094
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.7,1 * LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,1-LifeRatio);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_9A4350E7
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_D724F094";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_D6CD3E36
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_34FEFE31";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_B1F27048",
		"$LOCAL$/CParticleFieldDeclaration_2921F74A",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_7D2AE2D5";
	States = 
	{
		"$LOCAL$/CParticleState_E2381FBC",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_34FEFE31
{
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	BillboardMode = VelocityAxisAligned;
	AxisField = "Axis";
	AxisScale = 1.5000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_B1F27048
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_2921F74A
{
	FieldName = "Axis";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_7D2AE2D5
{
	Expression = "function void	Eval()
{
	Life = 1.5;
	Size = 0.05;
	//Velocity = scene.axisUp();
	Color = float4(1.0);
	Position = float3(-0.035,0.1,0.75);
	Axis = float3(0,0,1);
}
";
}
CParticleState	$LOCAL$/CParticleState_E2381FBC
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_91391B2F",
		"$LOCAL$/CParticleEvolver_Script_405E321E",
		"$LOCAL$/LocalSpace_5",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_91391B2F
{
	CustomName = "Physics";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_405E321E
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_7C2F92F0";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_7C2F92F0
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.7,1 * LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,1-LifeRatio);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/LightRayTR
{
	Descriptor = "$LOCAL$/CParticleDescriptor_D6CD3E36";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_2C0DE2B2
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_F78DFE5D";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_0F98BD06",
		"$LOCAL$/CParticleFieldDeclaration_DE16351A",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_FC3A8B0C";
	States = 
	{
		"$LOCAL$/CParticleState_4BFB40BF",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_F78DFE5D
{
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	BillboardMode = VelocityAxisAligned;
	AxisField = "Axis";
	AxisScale = 1.5000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_0F98BD06
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_DE16351A
{
	FieldName = "Axis";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_FC3A8B0C
{
	Expression = "function void	Eval()
{
	Life = 1.5;
	Size = 0.05;
	//Velocity = scene.axisUp();
	Color = float4(1.0);
	Position = float3(0.12,-0.09,0.75);
	Axis = float3(0,0,1);
}
";
}
CParticleState	$LOCAL$/CParticleState_4BFB40BF
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_3BE17EEE",
		"$LOCAL$/CParticleEvolver_Script_82EB7149",
		"$LOCAL$/LocalSpace_4",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_3BE17EEE
{
	CustomName = "Physics";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_82EB7149
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_BF87D540";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_BF87D540
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.7,1 * LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,1-LifeRatio);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/LightRayBL
{
	Descriptor = "$LOCAL$/CParticleDescriptor_2C0DE2B2";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_39ED8E82
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_DF5E2E6D";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_6067DC07",
		"$LOCAL$/CParticleFieldDeclaration_5ED917D6",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_22C50851";
	States = 
	{
		"$LOCAL$/CParticleState_346E34E8",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_DF5E2E6D
{
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	BillboardMode = VelocityAxisAligned;
	AxisField = "Axis";
	AxisScale = 1.5000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_6067DC07
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5ED917D6
{
	FieldName = "Axis";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_22C50851
{
	Expression = "function void	Eval()
{
	Life = 1.5;
	Size = 0.05;
	//Velocity = scene.axisUp();
	Color = float4(1.0);
	Position = float3(-0.035,-0.09,0.75);
	Axis = float3(0,0,1);
}
";
}
CParticleState	$LOCAL$/CParticleState_346E34E8
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_A92D01CB",
		"$LOCAL$/CParticleEvolver_Script_31C28EEA",
		"$LOCAL$/LocalSpace_3",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_A92D01CB
{
	CustomName = "Physics";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_31C28EEA
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_9EA582F5";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_9EA582F5
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.7,1 * LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,1-LifeRatio);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/LightRayBR
{
	Descriptor = "$LOCAL$/CParticleDescriptor_39ED8E82";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CActionFactoryParticleSpawnerBase	$LOCAL$/BackEmbers
{
	Descriptor = "$LOCAL$/CParticleDescriptor_BCF0524F";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 8.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_BCF0524F
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_D1719390";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_2D43E259",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_3ADC27BE";
	States = 
	{
		"$LOCAL$/CParticleState_0D36F193",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_3ADC27BE
{
	Expression = "function void	Eval()
{
	Life = 2;
	Size = 0.04;
	Velocity = (vrand(-1,1) + float3(0,0,2))*0.05;
	Color = float4(1.0);
	Position = float3(0.025,0,0.2);
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_2D43E259
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_D1719390
{
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_flare_03.dds";
	SoftnessDistance = 9.9999998e-003;
	AxisScale = 5.0000001e-002;
}
CParticleState	$LOCAL$/CParticleState_0D36F193
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_2DBFD652",
		"$LOCAL$/CParticleEvolver_Script_22A8AC84",
		"$LOCAL$/Evolver_1",
		"$LOCAL$/Field_4",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_2DBFD652
{
	CustomName = "Physics";
	ConstantAcceleration = float3(0.0000000e+000, -1.0000000e-001, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_C0872A7D
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,1 * LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,1);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_22A8AC84
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_C0872A7D";
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_3
{
	CustomName = "Localspace";
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_4
{
	CustomName = "Localspace";
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_5
{
	CustomName = "Localspace";
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_6
{
	CustomName = "Localspace";
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_7
{
	CustomName = "Localspace";
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_8
{
	CustomName = "Localspace";
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_9
{
	CustomName = "Localspace";
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_10
{
	CustomName = "Localspace";
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_11
{
	CustomName = "Localspace";
}
CParticleEvolver_Localspace	$LOCAL$/LocalSpace_12
{
	CustomName = "Localspace";
}
CParticleRenderer_Ribbon	$LOCAL$/CParticleRenderer_Ribbon_FE973329
{
	CustomName = "Ribbon";
	Quality = CorrectDeformation;
	Diffuse = "Textures/vfx_gradient_06.dds";
	SoftnessDistance = 9.9999998e-003;
	AlphaCursorField = "Alpha";
	BillboardMode = NormalAxisAligned;
	AxisField = "Normal";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_D724F094
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_9A4350E7";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_D6CD3E36",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_34FEFE31";
	States = 
	{
		"$LOCAL$/CParticleState_B1F27048",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_9A4350E7
{
	CustomName = "Billboard";
	BillboardingMaterial = Additive_Soft;
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	SoftnessDistance = 2.0000000e-001;
	AxisField = "Axis";
	Axis2Field = "AxisUp";
	AxisScale = 1.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D6CD3E36
{
	FieldName = "Color";
	FieldType = float4;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_34FEFE31
{
	Expression = "function void	Eval()
{
	Life = 1.5;
	Size = 0.05;
	
	Color = float4(1.0);
	Position = float3(0.025,0,0.2);
	
}
";
}
CParticleState	$LOCAL$/CParticleState_B1F27048
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_7A7E30AB",
		"$LOCAL$/CParticleEvolver_Field_2921F74A",
		"$LOCAL$/CParticleEvolver_Script_E2381FBC",
		"$LOCAL$/CParticleEvolver_Localspace_405E321E",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_7A7E30AB
{
	CustomName = "Physics";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_2921F74A
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_7D2AE2D5";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_7D2AE2D5
{
	Times = 
	{
		0.0000000e+000,
		6.6292070e-002,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		7.6960671e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		-1.2212588e-002,
		-1.7201138e-001,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_E2381FBC
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_91391B2F";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_91391B2F
{
	Expression = "function void	Eval()
{
	float Offset = 0.0;
	float Scale = 0.5;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.7,1 * LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,1-LifeRatio);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Localspace	$LOCAL$/CParticleEvolver_Localspace_405E321E
{
	CustomName = "Localspace";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Layer_1
{
	Descriptor = "$LOCAL$/CParticleDescriptor_D724F094";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_7C2F92F0
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_87A33473";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_2C0DE2B2",
		"$LOCAL$/CParticleFieldDeclaration_BF87D540",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_F78DFE5D";
	States = 
	{
		"$LOCAL$/CParticleState_526C1DE4",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_87A33473
{
	CustomName = "Billboard";
	BillboardingMaterial = Additive_Soft;
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	SoftnessDistance = 2.0000000e-001;
	BillboardMode = VelocityAxisAligned;
	AxisField = "Axis";
	Axis2Field = "AxisUp";
	AxisScale = 1.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_2C0DE2B2
{
	FieldName = "Color";
	FieldType = float4;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_F78DFE5D
{
	Expression = "function void	Eval()
{
	Life = 1.5;
	Size = 0.05;
	
	Color = float4(1.0);
	Position = float3(0.025,0,0.95);
	Axis = float3(0,0,3);
	
}
";
}
CParticleState	$LOCAL$/CParticleState_526C1DE4
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_D3686077",
		"$LOCAL$/CParticleEvolver_Field_0F98BD06",
		"$LOCAL$/CParticleEvolver_Script_AE4ED498",
		"$LOCAL$/CParticleEvolver_Localspace_3BE17EEE",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_D3686077
{
	CustomName = "Physics";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_0F98BD06
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_A06DFD41";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_A06DFD41
{
	Times = 
	{
		0.0000000e+000,
		6.1049782e-002,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		6.3269502e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		-1.1246833e-002,
		-1.7297713e-001,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_AE4ED498
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_4BFB40BF";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_4BFB40BF
{
	Expression = "function void	Eval()
{
	float Offset = 0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,1.5 * LifeRatio);
	RGB = hsv2rgb(RGB);
	
	float4 ColorOut = float4(RGB,1-LifeRatio);//ColorCoeff;
	
	
	
	Color = ColorOut;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Localspace	$LOCAL$/CParticleEvolver_Localspace_3BE17EEE
{
	CustomName = "Localspace";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Layer_2
{
	Descriptor = "$LOCAL$/CParticleDescriptor_7C2F92F0";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_BF87D540
{
	FieldName = "Axis";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleEvolver_Damper	$LOCAL$/Evolver_1
{
	CustomName = "Damper";
	MinSpeed = 5.0000000e-001;
	ExpDampingTime = 2.0000000e+000;
	FieldToDampen = "Velocity";
}
CParticleEvolver_Field	$LOCAL$/Field_4
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_6128E19F";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_6128E19F
{
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		2.2648081e-002,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		-2.1483243e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
