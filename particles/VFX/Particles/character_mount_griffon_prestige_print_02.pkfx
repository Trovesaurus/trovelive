Version = 1.13.4.53415;
Generator = EDITOR;
CParticleEffect	$LOCAL$/Resource
{
	OnSpawn = "$LOCAL$/Spawner";
	CustomAttributes = "$LOCAL$/_GlobalAttributes";
}
CNEdEditorParticle_Data	$LOCAL$/EDITOR
{
	Position = float3(8.7851971e-001, 7.2307175e-001, 4.8167887e-001);
	EulerOrientation = float3(-2.6949999e+001, 5.9135967e+001, 0.0000000e+000);
	Duration = 1.5000000e+000;
	PostFx_EnableGlow = false;
	Backdrops = "$LOCAL$/_BackdropList";
	ShowGrid = true;
	IsLooping = true;
}
CActionFactoryWithChilds	$LOCAL$/Spawner
{
	ChildList = 
	{
		"$LOCAL$/PawPrint",
		"$LOCAL$/Layer_1",
		"$LOCAL$/Layer_2",
	};
}
CParticleAttributeList	$LOCAL$/_GlobalAttributes
{
	SamplerList = 
	{
		"$LOCAL$/CParticleSamplerCurve_6128E19F",
	};
}
CActionFactoryParticleSpawnerBase	$LOCAL$/PawPrint
{
	Descriptor = "$LOCAL$/CParticleDescriptor_DE7F5BFB";
}
CNEdEditorBackdrop_Model3D	$LOCAL$/_Backdrop_Model3D
{
	EditorInfosPosition = int2(-252, -371);
	IsVisible = false;
	LayerName = "Layer_Model";
	ResourceModel = "meshes/cuberoom_default.fbx";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_DE7F5BFB
{
	EnableSpawnerIDs = true;
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_4D0836D2";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_EC13C24D",
		"$LOCAL$/CParticleFieldDeclaration_C26ECBDC",
		"$LOCAL$/CParticleFieldDeclaration_8A94AB2F",
		"$LOCAL$/CParticleFieldDeclaration_DF6E1936",
		"$LOCAL$/CParticleFieldDeclaration_EC30AB21",
		"$LOCAL$/CParticleFieldDeclaration_E1AA66BB",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_6EDEFAA3";
	States = 
	{
		"$LOCAL$/CParticleState_DE05FADA",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_4D0836D2
{
	DrawOrder = 1;
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend;
	Diffuse = "Textures/vfx_birdPrint_01.dds";
	BillboardMode = PlanarAlignedQuad;
	VFlipUVs = true;
	AxisField = "AxisAlign";
	Axis2Field = "AxisNormal";
	AxisScale = 1.3500000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_EC13C24D
{
	FieldName = "AxisAlign";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_C26ECBDC
{
	FieldName = "AxisNormal";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_8A94AB2F
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_DF6E1936
{
	FieldName = "SizeCoeff";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_EC30AB21
{
	FieldName = "ColorCoeff";
}
CNEdEditorLightFactory	$LOCAL$/_Backdrop_Light_Factory
{
	NearClipPlane = 1.0000000e+002;
	LightSize = 9.9999998e-003;
	SpotFalloff = 8.8541701e-002;
	Magnitude = 1.0000000e+005;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_6EDEFAA3
{
	Expression = "function void	Eval()

{
	Life = 2;
	Size = 0.05;
	AxisAlign = float3(0,0,-1);
	AxisNormal = float3(0,1,0);
	Position = float3(0,0.01,0);
}";
}
CParticleState	$LOCAL$/CParticleState_DE05FADA
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_ED449635",
		"$LOCAL$/CParticleEvolver_Field_32DDF024",
		"$LOCAL$/CParticleEvolver_Field_38F39FBE",
		"$LOCAL$/CParticleEvolver_Script_FE973329",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_ED449635
{
	CustomName = "Physics";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_32DDF024
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_2BC25E57";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_2BC25E57
{
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		2.2257948e-001,
		2.2257948e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_EAF43789
{
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		7.4034852e-001,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-4.6155378e-003,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_38F39FBE
{
	CustomName = "Field";
	Name = "Color";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_EAF43789";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_E1AA66BB
{
	FieldName = "ColorOffset";
}
CNEdEditorBackdrop_Light	$LOCAL$/_Backdrop_Light
{
	LayerName = "GlobalLight";
	Position = float3(1.1233553e+002, 2.8270447e+002, 2.2297581e+002);
	EulerOrientation = float3(-4.8645687e+001, 2.6523003e+001, -2.1307579e-001);
	UniformScale = 9.9999988e-001;
	LightFactory = "$LOCAL$/_Backdrop_Light_Factory";
	LightDistance = 3.7717276e+002;
}
CNEdEditorBackdrop_List	$LOCAL$/_BackdropList
{
	EditorInfosPosition = int2(-100, -365);
	BackgroundLayers2D = 
	{
		"$LOCAL$/_Backdrop_Brush",
	};
	SceneLayers3D = 
	{
		"$LOCAL$/_Backdrop_Model3D",
		"$LOCAL$/_Backdrop_Light",
	};
}
CNEdEditorBackdrop_Brush	$LOCAL$/_Backdrop_Brush
{
	EditorInfosPosition = int2(-253, -417);
	LayerName = "Layer_Brush";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_6128E19F
{
	SamplerName = "Curve_1";
	ValueType = Float3;
	Interpolator = Linear;
	Times = 
	{
		0.0000000e+000,
		2.7766120e-001,
		3.0205205e-001,
		3.4843531e-001,
		5.8928537e-001,
		6.5161443e-001,
		6.6596043e-001,
		7.4857950e-001,
		7.9553187e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		8.2352942e-001,
		4.9411768e-001,
		2.3529410e-002,
		9.8431373e-001,
		6.7843145e-001,
		3.1372551e-002,
		1.0000000e+000,
		7.9607844e-001,
		2.7058828e-001,
		5.4509819e-001,
		1.7254902e-001,
		7.2156864e-001,
		5.5501205e-001,
		1.7437525e-001,
		7.2313398e-001,
		6.9411778e-001,
		2.0000000e-001,
		7.4509805e-001,
		9.2016929e-001,
		2.2605163e-001,
		6.5350252e-001,
		9.5294118e-001,
		2.5490198e-001,
		5.0196064e-001,
		1.6862744e-001,
		8.1176472e-001,
		7.3725498e-001,
		3.1372553e-001,
		9.1764706e-001,
		7.9215682e-001,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_673D414E
{
	Expression = "function void	Eval()
{
	float Offset = 0.0;
	float Scale = 0.5;
	float3 RGB = Curve_1.sample(0.1);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,0.1);
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,cos(LifeRatio*pi*1));//ColorCoeff;
	Color = ColorOut ;
	
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_FE973329
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_673D414E";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_6128E19F
{
	EnableSpawnerIDs = true;
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_673D414E";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_FE973329",
		"$LOCAL$/CParticleFieldDeclaration_A33BCCA0",
		"$LOCAL$/CParticleFieldDeclaration_E71217E3",
		"$LOCAL$/CParticleFieldDeclaration_C39BD2E2",
		"$LOCAL$/CParticleFieldDeclaration_B0AD9A4D",
		"$LOCAL$/CParticleFieldDeclaration_D724F094",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_9A4350E7";
	States = 
	{
		"$LOCAL$/CParticleState_D6CD3E36",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_673D414E
{
	DrawOrder = 1;
	CustomName = "Billboard";
	Diffuse = "Textures/gate_a.dds";
	BillboardMode = PlanarAlignedQuad;
	VFlipUVs = true;
	AxisField = "AxisAlign";
	Axis2Field = "AxisNormal";
	AxisScale = 1.3500000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_FE973329
{
	FieldName = "AxisAlign";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_A33BCCA0
{
	FieldName = "AxisNormal";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_E71217E3
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_C39BD2E2
{
	FieldName = "SizeCoeff";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_B0AD9A4D
{
	FieldName = "ColorCoeff";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D724F094
{
	FieldName = "ColorOffset";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_9A4350E7
{
	Expression = "function void	Eval()

{
	Life = 2;
	Size = 0.25;
	AxisAlign = float3(0,0,-1);
	AxisNormal = float3(0,1,0);
	Position = float3(0,0.01,0);
}";
}
CParticleState	$LOCAL$/CParticleState_D6CD3E36
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_34FEFE31",
		"$LOCAL$/CParticleEvolver_Field_B1F27048",
		"$LOCAL$/CParticleEvolver_Field_2921F74A",
		"$LOCAL$/CParticleEvolver_Script_E2381FBC",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_34FEFE31
{
	CustomName = "Physics";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_B1F27048
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_7A7E30AB";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_7A7E30AB
{
	Times = 
	{
		0.0000000e+000,
		1.4777911e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		9.1220543e-002,
		3.1179354e-001,
		4.1735297e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		2.8209835e-001,
		5.9805857e-003,
		3.4489181e-002,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_2921F74A
{
	CustomName = "Field";
	Name = "Color";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_7D2AE2D5";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_7D2AE2D5
{
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		7.4034852e-001,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-4.6155378e-003,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_E2381FBC
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_91391B2F";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_91391B2F
{
	Expression = "function void	Eval()
{
	float Offset = 0.0;
	float Scale = 0.5;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,cos(LifeRatio*pi*0.5));
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,cos(LifeRatio*pi*0.5));//ColorCoeff;
	Color = ColorOut ;
	
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Layer_1
{
	Descriptor = "$LOCAL$/CParticleDescriptor_6128E19F";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Layer_2
{
	Descriptor = "$LOCAL$/CParticleDescriptor_876F8C39";
	SpawnCount = 5.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_876F8C39
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_2C0DE2B2";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_87A33473",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerShape_D3686077",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_7C2F92F0";
	States = 
	{
		"$LOCAL$/CParticleState_F78DFE5D",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_7C2F92F0
{
	Expression = "function void	Eval()
{
	Life = 0.50;
	Size = 0.09;
	Velocity = float3(0,rand(0.1,1),0);
	Color = float4(1.0);
	Position = Shape_1.samplePosition();
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_87A33473
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_2C0DE2B2
{
	DrawOrder = 2;
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_circle_03_add-alpha.dds";
	BillboardMode = VelocityAxisAligned;
	AxisScale = 5.0000000e-001;
}
CParticleState	$LOCAL$/CParticleState_F78DFE5D
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_526C1DE4",
		"$LOCAL$/CParticleEvolver_Script_AE4ED498",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_526C1DE4
{
	CustomName = "Physics";
}
CParticleSamplerShape	$LOCAL$/CParticleSamplerShape_D3686077
{
	SamplerName = "Shape_1";
	Shape = "$LOCAL$/CShapeDescriptor_0F98BD06";
}
CShapeDescriptor	$LOCAL$/CShapeDescriptor_0F98BD06
{
	ShapeType = CYLINDER;
	Radius = 1.0000000e-001;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_A06DFD41
{
	Expression = "function void	Eval()
{
	float Offset = 0.25;
	float Scale = 0.5;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,cos(LifeRatio*pi*0.5));
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,cos(LifeRatio*pi*0.5));//ColorCoeff;
	Color = ColorOut ;
	
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_AE4ED498
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_A06DFD41";
}
