Version = 1.9.0.26281;
CParticleEffect	$LOCAL$/Resource
{
	EditorInfosPosition = int2(73, 52);
	OnSpawn = "$LOCAL$/Spawner";
	CustomAttributes = "$LOCAL$/_GlobalAttributes";
	Autostart = true;
}
CNEdEditorParticle_Data	$LOCAL$/EDITOR
{
	EditorInfosPosition = int2(413, -144);
	Backdrops = "$LOCAL$/_BackdropList";
	SubEntityTreeFactory = "$LOCAL$/CEntityWithTransformsFactory_96A00101";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Layer_1
{
	EditorInfosPosition = int2(-288, -61);
	Descriptor = "$LOCAL$/CParticleDescriptor_AE135B2A";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 2.0000000e+001;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_AE135B2A
{
	EditorInfosPosition = int2(-392, -44);
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_9136D2F4";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_8CAB8D96",
		"$LOCAL$/CParticleFieldDeclaration_5D0ECCDA",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerShape_1DE9D111",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_5566F5E7";
	States = 
	{
		"$LOCAL$/CParticleState_3AF8190E",
	};
}
CActionFactoryWithChilds	$LOCAL$/Spawner
{
	EditorInfosPosition = int2(-162, -81);
	ChildList = 
	{
		"$LOCAL$/Layer_1",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_9136D2F4
{
	EditorInfosPosition = int2(-508, -63);
	Diffuse = "Textures/vfx_circle_01.dds";
	BillboardMode = VelocityAxisAligned;
	AxisScale = 5.0000001e-002;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_5566F5E7
{
	EditorInfosPosition = int2(-508, 22);
	Expression = "function void Eval()
{
    Life = 10;    // large life, will die after 10 seconds if they have not reached the target.
    Position = 0; // origin in effect\'s local-space (player hand)
    Size = 0.1;
}
";
}
CParticleState	$LOCAL$/CParticleState_3AF8190E
{
	EditorInfosPosition = int2(-508, 65);
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_A5BB148B",
		"$LOCAL$/CParticleEvolver_Physics_36D6D4BD",
		"$LOCAL$/CParticleEvolver_Field_6ED69FA5",
		"$LOCAL$/CParticleEvolver_Script_4F420FB5",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_36D6D4BD
{
	EditorInfosPosition = int2(-590, 86);
	ConstantAcceleration = float3(0.0000000e+000, 2.0000000e+000, 0.0000000e+000);
}
CEntityWithTransformsFactory	$LOCAL$/CEntityWithTransformsFactory_96A00101
{
	EditorInfosPosition = int2(303, -79);
}
CParticleAttributeList	$LOCAL$/_GlobalAttributes
{
	EditorInfosPosition = int2(-599, -20);
	AttributeList = 
	{
		"$LOCAL$/CParticleAttributeDeclaration_983A0AC7",
	};
}
CNEdEditorBackdrop_List	$LOCAL$/_BackdropList
{
	EditorInfosPosition = int2(125, -433);
	BackgroundLayers2D = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Brush_9A913525",
	};
	SceneLayers3D = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Model3D_578F322E",
		"$LOCAL$/_Backdrop_Light",
	};
}
CNEdEditorBackdrop_Brush	$LOCAL$/CNEdEditorBackdrop_Brush_9A913525
{
	EditorInfosPosition = int2(-27, -485);
	LayerName = "Layer_Brush";
}
CNEdEditorBackdrop_Model3D	$LOCAL$/CNEdEditorBackdrop_Model3D_578F322E
{
	EditorInfosPosition = int2(-17, -380);
	LayerName = "Model";
	ResourceModel = "Meshes/CubeRoom_Default.pkmm";
}
CNEdEditorBackdrop_Light	$LOCAL$/_Backdrop_Light
{
	LayerName = "GlobalLight";
	UniformScale = 9.9999988e-001;
	Position = float3(1.1233553e+002, 2.8270447e+002, 2.2297581e+002);
	EulerOrientation = float3(-4.8550171e+001, 2.6739031e+001, -9.5600376e-007);
	LightDistance = 3.7717276e+002;
	LightFactory = "$LOCAL$/_Backdrop_Light_Factory";
}
CNEdEditorLightFactory	$LOCAL$/_Backdrop_Light_Factory
{
	NearClipPlane = 1.0000000e+002;
	SpotFalloff = 8.8541701e-002;
	Magnitude = 1.0000000e+005;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_983A0AC7
{
	AttributeName = "TargetPosition";
	AttributeType = float3;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_8CAB8D96
{
	FieldName = "StartPosition";
	FieldType = float3;
	TransformFilter = translate;
}
CParticleSamplerShape	$LOCAL$/CParticleSamplerShape_1DE9D111
{
	SamplerName = "CollideTarget";
	Shape = "$LOCAL$/CShapeDescriptor_BA5A4CA8";
}
CShapeDescriptor	$LOCAL$/CShapeDescriptor_BA5A4CA8
{
	ShapeType = SPHERE;
	Radius = 2.5000000e-001;
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_A5BB148B
{
	EditorInfosIsBlockMinimized = 0;
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_774CB8AA";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_774CB8AA
{
	Expression = "function void Eval()
{
    float speed = 20; // 5 world units/sec (arbitrary, you can ram this into an attribute as well)
    Velocity = normalize(TargetPosition - Position) * speed;
    StartPosition = Position; // backup position at beginning of frame, before physics evolver does its moving around.
}
";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_4F420FB5
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_CCB65E1C";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_CCB65E1C
{
	Expression = "function void Eval()
{
    float3 moveVector = Position - StartPosition;
	float4 intersection = CollideTarget.intersect(StartPosition - TargetPosition, normalize(moveVector), length(moveVector));
    kill(intersection.w != infinity);
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5D0ECCDA
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_6ED69FA5
{
	EditorInfosIsBlockMinimized = 0;
	Name = "Color";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_31CD34CC";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_31CD34CC
{
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		4.9999997e-002,
		1.0000000e+000,
	};
	FloatValues = 
	{
		1.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
