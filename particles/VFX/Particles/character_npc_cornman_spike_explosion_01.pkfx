Version = 1.13.4.53415;
Generator = EDITOR;
CParticleEffect	$LOCAL$/Resource
{
	EditorInfosPosition = int2(73, 52);
	OnSpawn = "$LOCAL$/Spawner";
	CustomAttributes = "$LOCAL$/_GlobalAttributes";
}
CNEdEditorParticle_Data	$LOCAL$/EDITOR
{
	EditorInfosPosition = int2(413, -144);
	Duration = 1.0000000e+000;
	Backdrops = "$LOCAL$/_BackdropList";
	IsLooping = true;
}
CActionFactoryWithChilds	$LOCAL$/Spawner
{
	EditorInfosPosition = int2(-162, -81);
	ChildList = 
	{
		"$LOCAL$/Flash_Gradient",
		"$LOCAL$/Flash_Ring",
		"$LOCAL$/Sparkles_1",
		"$LOCAL$/Spikes",
		"$LOCAL$/SoundLayer_1",
	};
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Sparkles_1
{
	Descriptor = "$LOCAL$/CParticleDescriptor_7301A84D";
	SpawnCountMode = TotalParticleCount;
	SpawnCount = 1.2000000e+001;
}
CNEdEditorLightFactory	$LOCAL$/_Backdrop_Light_Factory
{
	NearClipPlane = 1.0000000e+002;
	LightSize = 9.9999998e-003;
	SpotFalloff = 8.8541701e-002;
	Magnitude = 1.0000000e+005;
}
CParticleAttributeList	$LOCAL$/_GlobalAttributes
{
	EditorInfosPosition = int2(-599, -20);
	SamplerList = 
	{
		"$LOCAL$/CParticleSamplerCurve_6128E19F",
	};
}
CNEdEditorBackdrop_List	$LOCAL$/_BackdropList
{
	EditorInfosPosition = int2(125, -433);
	BackgroundLayers2D = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Brush_9A913525",
	};
	SceneLayers3D = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Model3D_578F322E",
		"$LOCAL$/_Backdrop_Light",
	};
}
CNEdEditorBackdrop_Brush	$LOCAL$/CNEdEditorBackdrop_Brush_9A913525
{
	EditorInfosPosition = int2(-27, -485);
	LayerName = "Layer_Brush";
}
CNEdEditorBackdrop_Model3D	$LOCAL$/CNEdEditorBackdrop_Model3D_578F322E
{
	EditorInfosPosition = int2(-17, -380);
	IsVisible = false;
	LayerName = "Model";
	ResourceModel = "Meshes/CubeRoom_Default.fbx";
}
CNEdEditorBackdrop_Light	$LOCAL$/_Backdrop_Light
{
	LayerName = "GlobalLight";
	Position = float3(1.1233553e+002, 2.8270447e+002, 2.2297581e+002);
	EulerOrientation = float3(-4.8550171e+001, 2.6739031e+001, -9.5600376e-007);
	LightFactory = "$LOCAL$/_Backdrop_Light_Factory";
	LightDistance = 3.7717276e+002;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_7301A84D
{
	Renderer = "$LOCAL$/CParticleRenderer_List_94E31694";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_CC32AC31",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_923C85BC";
	States = 
	{
		"$LOCAL$/CParticleState_73C2792F",
	};
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_94E31694
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Billboard_1C296EE7",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_1C296EE7
{
	DrawOrder = 1;
	CustomName = "Billboard";
	Diffuse = "Textures/vfx_dot_01.dds";
	BillboardMode = VelocityAxisAligned;
	AxisScale = 1.5000001e-001;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_CC32AC31
{
	FieldName = "Color";
	FieldType = float4;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_923C85BC
{
	Expression = "function void	Eval()

{
	Life = rand(0.25,0.35);
	Size = rand(0.1, 0.2);
	Velocity = float3(rand(-1,1),rand(0.2,1),rand(-1,1)) * rand(20,25);
	Position = float3(0,0,0);
}";
}
CParticleState	$LOCAL$/CParticleState_73C2792F
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_ECD3E81E",
		"$LOCAL$/Evolver_1",
		"$LOCAL$/CParticleEvolver_Script_9A4350E7",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_ECD3E81E
{
	CustomName = "Physics";
	Drag = 1.0000000e+000;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_2805D059
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_37431990";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_6503EF93",
		"$LOCAL$/CParticleFieldDeclaration_30F1AC52",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerShape_6612B87D",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_C0246197";
	States = 
	{
		"$LOCAL$/CParticleState_EBB644A6",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_37431990
{
	DrawOrder = 1;
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend;
	Diffuse = "Textures/vfx_burst_fb2x2_01.dds";
	AtlasDefinition = "AtlasDefinitions/atlasDef_2x2.pkat";
	SoftAnimationBlending = true;
	SoftnessDistance = 2.0000000e+000;
	BillboardMode = VelocityAxisAligned;
	AxisScale = 1.5000001e-001;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_6503EF93
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_30F1AC52
{
	FieldName = "ColorCoeff";
}
CParticleSamplerShape	$LOCAL$/CParticleSamplerShape_6612B87D
{
	SamplerName = "Sampler_0";
	Shape = "$LOCAL$/CShapeDescriptor_E0345284";
}
CShapeDescriptor	$LOCAL$/CShapeDescriptor_E0345284
{
	ShapeType = COMPLEX_ELLIPSOID;
	Radius = 3.0000001e-001;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_C0246197
{
	Expression = "function void	Eval()
{
	Life = rand(0.1,0.25);
	Size = 0.5;
	Rotation = rand(-pi,pi);
	ScalarRotationSpeed = rand(-0.25,0.25);
	Position = Sampler_0.samplePosition();
	Velocity = Position * 90 + float3(0,3,0);
}
";
}
CParticleState	$LOCAL$/CParticleState_EBB644A6
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_5BB04D61",
		"$LOCAL$/CParticleEvolver_FlipBook_A0395738",
		"$LOCAL$/CParticleEvolver_Rotation_85261ABA",
		"$LOCAL$/CParticleEvolver_Field_5C4E2DDF",
		"$LOCAL$/CParticleEvolver_Script_AA4E4D69",
		"$LOCAL$/CParticleEvolver_Field_744F1023",
		"$LOCAL$/CParticleEvolver_Script_34FEFE31",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_5BB04D61
{
	CustomName = "Physics";
	ConstantAcceleration = float3(0.0000000e+000, -1.0000000e+001, 0.0000000e+000);
}
CParticleEvolver_FlipBook	$LOCAL$/CParticleEvolver_FlipBook_A0395738
{
	CustomName = "FlipBook";
	AnimationCursor = "0";
	LastFrameID = 3;
	RandomizeFirstFrame = true;
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Spikes
{
	Descriptor = "$LOCAL$/CParticleDescriptor_2805D059";
	SpawnCount = 2.5000000e+001;
}
CParticleEvolver_Rotation	$LOCAL$/CParticleEvolver_Rotation_85261ABA
{
	CustomName = "Rotation";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_5C4E2DDF
{
	CustomName = "Field";
	Name = "ColorCoeff";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_A2AA628E";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_A2AA628E
{
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		2.0000000e+000,
		-1.5789360e-002,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_AA4E4D69
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_A497D3E0";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_A497D3E0
{
	Expression = "function void	Eval()
{
	Color *= ColorCoeff;
}
";
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_744F1023
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_25E41022";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_25E41022
{
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		2.6112407e-001,
		2.6391602e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		8.6689452e-003,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CActionFactorySound	$LOCAL$/SoundLayer_1
{
	EditorInfosIsBlockMinimized = 0;
	EventStart = "Play_ablty_snowball_hit";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_8446CD06
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_8CAD4D41";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_F4D86498",
		"$LOCAL$/CParticleFieldDeclaration_4BB6133B",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_2AA71B0C";
	States = 
	{
		"$LOCAL$/CParticleState_FD9B10BF",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_8CAD4D41
{
	DrawOrder = 1;
	CustomName = "Billboard";
	BillboardingMaterial = Additive_Soft;
	Diffuse = "Textures/vfx_circle_02.dds";
	SoftAnimationBlending = true;
	SoftnessDistance = 2.0000000e+000;
	BillboardMode = VelocitySpheroidalAlign;
	AxisScale = 2.5000000e-001;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_F4D86498
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_4BB6133B
{
	FieldName = "ColorCoeff";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_2AA71B0C
{
	Expression = "function void	Eval()
{
	Life = 0.2;
	Size = 7;
	Rotation = rand(-pi,pi);
	ScalarRotationSpeed = rand(-0.25,0.25);
}
";
}
CParticleState	$LOCAL$/CParticleState_FD9B10BF
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_8B158EEE",
		"$LOCAL$/CParticleEvolver_FlipBook_7928C149",
		"$LOCAL$/CParticleEvolver_Rotation_B8E76540",
		"$LOCAL$/Field_1",
		"$LOCAL$/CParticleEvolver_Script_E71217E3",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_8B158EEE
{
	CustomName = "Physics";
}
CParticleEvolver_FlipBook	$LOCAL$/CParticleEvolver_FlipBook_7928C149
{
	CustomName = "FlipBook";
	LastFrameID = 18;
}
CParticleEvolver_Rotation	$LOCAL$/CParticleEvolver_Rotation_B8E76540
{
	CustomName = "Rotation";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Flash_Ring
{
	Descriptor = "$LOCAL$/CParticleDescriptor_8446CD06";
	SpawnCountMode = TotalParticleCount;
}
CParticleEvolver_Field	$LOCAL$/Field_1
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_49779EEA";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_49779EEA
{
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		4.1326451e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		2.5032518e+000,
		7.8971738e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_B22F3C5B
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_8ACD14BA";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_DB2C9505",
		"$LOCAL$/CParticleFieldDeclaration_BF15A5AC",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_E6311FDF";
	States = 
	{
		"$LOCAL$/CParticleState_79EF3C8E",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_8ACD14BA
{
	DrawOrder = 1;
	CustomName = "Billboard";
	BillboardingMaterial = Additive_Soft;
	Diffuse = "Textures/vfx_circle_03.dds";
	SoftAnimationBlending = true;
	SoftnessDistance = 4.0000000e+000;
	BillboardMode = VelocitySpheroidalAlign;
	AxisScale = 2.5000000e-001;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_DB2C9505
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_BF15A5AC
{
	FieldName = "ColorCoeff";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E6311FDF
{
	Expression = "function void	Eval()
{
	Life = 0.1;
	Size = 7;
}
";
}
CParticleState	$LOCAL$/CParticleState_79EF3C8E
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_10272F69",
		"$LOCAL$/CParticleEvolver_FlipBook_1B115DE0",
		"$LOCAL$/CParticleEvolver_Field_7E529DD4",
		"$LOCAL$/CParticleEvolver_Script_FE973329",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_10272F69
{
	CustomName = "Physics";
}
CParticleEvolver_FlipBook	$LOCAL$/CParticleEvolver_FlipBook_1B115DE0
{
	CustomName = "FlipBook";
	LastFrameID = 18;
}
CParticleEvolver_Field	$LOCAL$/CParticleEvolver_Field_7E529DD4
{
	CustomName = "Field";
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_613FE727";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_613FE727
{
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		8.4662466e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		2.5032518e+000,
		7.8971738e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Flash_Gradient
{
	Descriptor = "$LOCAL$/CParticleDescriptor_B22F3C5B";
	SpawnCountMode = TotalParticleCount;
}
CParticleEvolver_FlipBook	$LOCAL$/Evolver_1
{
	CustomName = "FlipBook";
	AnimationCursor = "0";
	LastFrameID = 3;
	LoopCount = 0.0000000e+000;
	RandomizeFirstFrame = true;
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_6128E19F
{
	SamplerName = "Curve_1";
	ValueType = Float3;
	Interpolator = Linear;
	Times = 
	{
		0.0000000e+000,
		1.4226681e-001,
		5.0070828e-001,
		8.1806362e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		2.1568625e-001,
		9.8039216e-001,
		3.9215768e-003,
		7.6078427e-001,
		9.0196079e-001,
		2.7450984e-002,
		1.0000000e+000,
		8.5098040e-001,
		0.0000000e+000,
		9.0196079e-001,
		5.7254905e-001,
		2.3529384e-002,
		1.0000000e+000,
		2.4705887e-001,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_673D414E
{
	Expression = "
function void	Eval()
{
	float Offset = 0.5;
	float Scale = 0.5;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,1,1);
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,LifeRatio);//ColorCoeff;
	Color = ColorOut *1.5;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_FE973329
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_673D414E";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_A33BCCA0
{
	Expression = "
function void	Eval()
{
	float Offset = 0.0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,1,ColorCoeff);
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,LifeRatio);//ColorCoeff;
	Color = ColorOut *1.5;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_E71217E3
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_A33BCCA0";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_D724F094
{
	Expression = "
function void	Eval()
{
	float Offset = 0.0;
	float Scale = 0.25;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,1,LifeRatio);
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,LifeRatio);//ColorCoeff;
	Color = ColorOut *1.5;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_9A4350E7
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_D724F094";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_D6CD3E36
{
	Expression = "
function void	Eval()
{
	float Offset = 0.0;
	float Scale = 0.1;
	float3 RGB = Curve_1.sample((LifeRatio*Scale)+Offset);
	RGB = rgb2hsv(RGB);
	RGB *= float3(1,0.9,ColorCoeff);
	RGB = hsv2rgb(RGB);
	float4 ColorOut = float4(RGB,ColorCoeff);//ColorCoeff;
	Color = ColorOut *1.5;
	//Color2 = ColorOut *3;
	
	// ++++++++++++++++++++++ HELPER CODE ++++++++++++++++++++++++++++++++++++++++++++++++++
	// fast.linear2srgb(c) - converts the input color \'c\' from linear space to sRGB space.
	// rgb2hsv(c)
	// hsv2rgb(c)
	// bias(x, e) - bias(x, e) de-linearizes the input \'x\' by applying a power function based on value \'e\'. x is expected to be in the [0,1] range, e has to be in the [-1,1] range.
	// smoothlerp(a,b,t) - EX: pt01 = Curve_1.sample(0,0.1) pt02 = Curve_1.sample(1,0.5) => smoothlerp(pt0,pt1,LifeRatio)
	// smoothstep(a,b,x) - smoothstep function. smoothly evaluates between 0 to 1 the position of x between a and b.
	// https://wiki.popcornfx.com/index.php?title=Scripting_reference_2000#Particle_spawn_and_evolve_scripts
	
}";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_34FEFE31
{
	CustomName = "Color";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_D6CD3E36";
}
